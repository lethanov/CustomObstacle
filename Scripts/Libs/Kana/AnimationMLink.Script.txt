#Const Version		"2016-02-24"
#Const ScriptName	"AnimationMLink.Script.txt"

#Include "MathLib" as MathLib

// ---------------------------------- //
// Private
// ---------------------------------- //
declare Real m_cursorXPosition;
declare Real m_cursorXPositionNow;
declare Real m_smooth;

Void m_calculeCursorXPos()
{
  if(m_cursorXPositionNow < m_cursorXPosition) {
  	if ((( m_cursorXPosition - m_cursorXPositionNow ) / m_smooth) > 1) {
  		m_cursorXPositionNow += ( m_cursorXPosition - m_cursorXPositionNow ) / m_smooth;
  	}
  }
  if(m_cursorXPositionNow > m_cursorXPosition) {
  	if ((( m_cursorXPositionNow - m_cursorXPosition ) / m_smooth) > 1) {
  		m_cursorXPositionNow -= ( m_cursorXPositionNow - m_cursorXPosition ) / m_smooth;
  	} 
  }
}

// ---------------------------------- //
// Public
// ---------------------------------- //
Void setRestPos(Real x, Real smooth){
	m_cursorXPosition = x;
	m_cursorXPositionNow = x;
	m_smooth = smooth;
}
Integer getPosiAnim(Real target)
{
	m_cursorXPosition = target;

	m_calculeCursorXPos();

	return MathLib::FloorInteger(m_cursorXPositionNow);
}

// ------------------ MANIALINK 1 ------------------
declare Real positionX;
Void diplayManialink_NoEditManialink()
{
	ManialinkText = """
	<script><!--			
		main() {

			declare Boolean Finish for Page;
			Finish = False;

			while(!Finish) {
				yield;
				
				foreach(Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							if (Event.ControlId == "back") {
								Finish = True;
							}
						}
					}
				}
			}
		}
	--></script>
	<frame posn="{{{getPosiAnim(-75.0)}}} -10">
		<quad posn="-80 39 0" sizen="80 84" style="Bgs1" substyle="BgHealthBar"/>
		<label posn="-40.5 32.5 0" sizen="76 8" text="Edit Anchor" halign="center" valign="center" style="TextTitle3" textsize="4" textcolor="229bffFF"/>
		<label posn="-40 11 0" sizen="77 26" text="This anchor is not editable" valign="center" halign="center" autonewline="1"/>
		<label posn="-41 -30" halign="center" style="CardMain_Quit" text="Back" scriptevents="1" id="back"/>
	</frame> """;
}
Void animMlink_NoEditManialink()
{
	declare Boolean animationIsContinue = True;
	while(animationIsContinue == True)
	{
		yield;
		diplayManialink_NoEditManialink();
		sleep(1);
		
		//end condition
		if ((m_cursorXPositionNow > (m_cursorXPosition - 3)) && (m_cursorXPositionNow < (m_cursorXPosition + 3)))
		{
			animationIsContinue = False;
		}
	}
}

// ------------------ MANIALINK 2 ------------------
Void diplayManialink_EditAnchorManialink()
{
	ManialinkText = 		
	"""
	<script><!--
		#Include "TextLib" as TextLib
					
		main() {
			
			declare Entries = [
				(Page.GetFirstChild("checkpointOrder") as CMlEntry),
				(Page.GetFirstChild("ammo") as CMlEntry)
				];
				
			declare Buttons = [
				(Page.GetFirstChild("Normal") as CMlLabel),
				(Page.GetFirstChild("Refill") as CMlLabel),			
				(Page.GetFirstChild("Infinite") as CMlLabel),
				(Page.GetFirstChild("Stamina Regeneration") as CMlLabel)
				];
					
			declare Boolean Finish for Page;
			declare Text AnchorOrder for Page;
			declare Text AnchorTag for Page;
			
			Finish = False;
			
			declare Integer Ammo;
			declare	Integer Stamina;	
			declare Integer StaminaRegen;
									
			declare AnchorDetails = TextLib::Split("|", AnchorTag);
			
			Entries[0].Value = AnchorOrder;

			if(AnchorDetails.count > 1){
				Entries[1].Value = AnchorDetails[1];
				Stamina = TextLib::ToInteger(AnchorDetails[2]);
				StaminaRegen = TextLib::ToInteger(AnchorDetails[3]);
			} else {
				Stamina = 0;
				StaminaRegen = 1;
			}
			
			if(Stamina == 0){
				Buttons[0].Value = "$fff" ^ Buttons[0].ControlId;
				Buttons[1].Value = "$000" ^ Buttons[1].ControlId;
				Buttons[2].Value = "$000" ^ Buttons[2].ControlId;
			}
			if(Stamina == 1){
				Buttons[0].Value = "$000" ^ Buttons[0].ControlId;
				Buttons[1].Value = "$fff" ^ Buttons[1].ControlId;
				Buttons[2].Value = "$000" ^ Buttons[2].ControlId;
			}
			if(Stamina == 2){
				Buttons[0].Value = "$000" ^ Buttons[0].ControlId;
				Buttons[1].Value = "$000" ^ Buttons[1].ControlId;
				Buttons[2].Value = "$fff" ^ Buttons[2].ControlId;
			}
			
			if(StaminaRegen == 1){
				Buttons[3].Value = Buttons[3].ControlId ^ " = Yes";
			} else {
				Buttons[3].Value = Buttons[3].ControlId ^ " = No";
			}
			
			Finish = False;	
			while(!Finish) {
				yield;
				
				foreach(Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							if (Event.ControlId == "Normal") {
								Stamina = 0;
								Buttons[0].Value = "$fff" ^ Buttons[0].ControlId;
								Buttons[1].Value = "$000" ^ Buttons[1].ControlId;
								Buttons[2].Value = "$000" ^ Buttons[2].ControlId;
							}
							if (Event.ControlId == "Refill") {
								Stamina = 1;
								Buttons[0].Value = "$000" ^ Buttons[0].ControlId;
								Buttons[1].Value = "$fff" ^ Buttons[1].ControlId;
								Buttons[2].Value = "$000" ^ Buttons[2].ControlId;			
							}
							if(Event.ControlId == "Infinite"){
								Stamina = 2;
								Buttons[0].Value = "$000" ^ Buttons[0].ControlId;
								Buttons[1].Value = "$000" ^ Buttons[1].ControlId;
								Buttons[2].Value = "$fff" ^ Buttons[2].ControlId;		
							}
							if(Event.ControlId == "Stamina Regeneration"){
								if(StaminaRegen == 0){
									StaminaRegen = 1;
									Buttons[3].Value = Buttons[3].ControlId ^ " = Yes";
								} else if (StaminaRegen == 1){
									StaminaRegen = 0;
									Buttons[3].Value = Buttons[3].ControlId ^ " = No";
								}
							}
							if (Event.ControlId == "back") {
								Finish = True;
							}
						}	
					}
				}
			}
						
			//Check ammo value
			Ammo = TextLib::ToInteger(Entries[1].Value);
			if(Ammo < 0){
				Ammo = TextLib::ToInteger(AnchorDetails[1]);
			}
			if(Ammo > 11){
				Ammo = 11;
			}
						
			//Values default ?
			if(Ammo == 4 && Stamina == 0 && StaminaRegen == 1){
				AnchorTag = AnchorDetails[0];
			} else {
				AnchorTag = AnchorDetails[0] ^ "|" ^ TextLib::ToText(Ammo) ^ "|" ^ TextLib::ToText(Stamina) ^ "|" ^ TextLib::ToText(StaminaRegen);
			}
			
			AnchorOrder = Entries[0].Value;
		}			
	--></script>
	<frame posn="{{{getPosiAnim(-50.0)}}} -10">
		<quad posn="-99 39 0" sizen="118 84" style="Bgs1" substyle="BgHealthBar"/>

		<label id="Stamina Regeneration" posn="-80 -20 0" sizen="25 7" text="Stamina Regeneration" style="CardButtonMediumXXXL" scriptevents="1"/>

		<label id="Refill" posn="-58 -10 0" sizen="20 5" text="Refill" style="CardButtonMedium" scriptevents="1"/>
		<label id="Normal" posn="-95 -10 0" sizen="20 5" text="Normal" style="CardButtonMedium" scriptevents="1"/>

		<label id="Infinite" posn="-21 -10 0" sizen="20 5" text="Infinite" style="CardButtonMedium" scriptevents="1"/>
		
		
		<label posn="-96 10 0" sizen="64 5" text="Ammo (0 to 10, above = unlimited)"/>
		<label posn="-40.5 32.5 0" sizen="76 8" text="Edit Anchor" halign="center" valign="center" style="TextTitle3" textsize="4" textcolor="229bffFF"/>	
		<entry posn="14 18 0" sizen="34 7" default="0" id="checkpointOrder" style="TextButtonNavBack" scriptevents="1" textsize="1" textformat="default" valign="center2" halign="right" focusareacolor2="$f6f"/>	
		<entry posn="14 8 0" sizen="33 7" default="4" id="ammo" style="TextButtonNavBack" scriptevents="1" textsize="1" textformat="default" valign="center2" halign="right"/>
	
		<label posn="-96 18 0" sizen="52 10" text="Position (order) " valign="center" halign="left" autonewline="1"/>
		<label posn="-38 -4 0" sizen="82 10" text="Stamina Options" valign="center" halign="center" autonewline="1"/>
		<label posn="-60 -32" halign="center" style="CardMain_Quit" text="Back" scriptevents="1" id="back" sizen="92 9"/>
	</frame>
	""";
}
Void animMlink_EditAnchorManialink()
{
	declare Boolean animationIsContinue = True;
	while(animationIsContinue == True)
	{
		yield;
		diplayManialink_EditAnchorManialink();
		sleep(1);
		
		//end condition
		if ((m_cursorXPositionNow > (m_cursorXPosition - 3)) && (m_cursorXPositionNow < (m_cursorXPosition + 3)))
		{
			animationIsContinue = False;
		}
	}
}



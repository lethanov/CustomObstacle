// ---------------------------------- //
/** Create layer Speedometer
 *
 *	@return		Speedometer
 */
Text GetLayerSpeedometer() {
	return """
<manialink version="2" name="Turbo:Speedometer">
<frame id="Frame_Speedometer" posn="130 -60" hidden="1">
	<label posn="0 -.2" halign="center" valign="center2" textfont="Counter" textsize="11" textcolor="FFF" id="Label_Speed"/>
	<frame id="Q1C"><quad sizen="32 32" halign="center" valign="center" image="{{{C_ImgBase}}}TurboClock.png" opacity="1" id="Q1"/></frame>
	<frame id="Q2C"><quad sizen="32 32" halign="center" valign="center" image="{{{C_ImgBase}}}TurboClock.png" opacity="1" id="Q2"/></frame>
	<frame id="Q3C"><quad sizen="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}TurboClock2.png" opacity="1" id="Q3"/></frame>
	<frame id="Q4C"><quad sizen="42 42" halign="center" valign="center" image="{{{C_ImgBase}}}TurboClock2.png" opacity="1" id="Q4"/></frame>
	<frame id="Q5C"><quad sizen="52 52" halign="center" valign="center" image="{{{C_ImgBase}}}TurboClock3.png" opacity="1" id="Q5"/></frame>
</frame>
<script><!--
#Include "AnimLib" as AL
#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_HalfClockRatio [0., .5, 1., 1.5, 2., 2.5]
#Const C_FlameTriggerRatios [0., 1., 2.]

main() {
	declare Frame_Speedometer	<=> (Page.GetFirstChild("Frame_Speedometer")	as CMlFrame);
	declare Label_Speed			<=> (Page.GetFirstChild("Label_Speed")			as CMlLabel);
	
	// Clock elements
	declare CMlQuad[] ClockQuads;
	for (I, 1, C_HalfClockRatio.count-1) {
		ClockQuads.add((Page.GetFirstChild("Q"^I) as CMlQuad));
		ClockQuads[I-1].Opacity = .8;
		
		// Clip window
		declare Frame_Clip <=> (Page.GetFirstChild("Q"^I^"C") as CMlFrame);
		Frame_Clip.ClipWindowActive = True;
		Frame_Clip.ClipWindowSize = <26., 52.>;
		Frame_Clip.ClipWindowRelativePosition = <13.5 * (1-((I%2)*2)), 0.>;
	}
	
	// Variables
	declare Boolean ClockVisible;
	declare Real ClockRatio;
	declare Real PrevRatio;
	declare Integer AnimStart;
	
	while (True) {
		yield;
		
		// ---------------------------------- //
		// Set clock visibility
		ClockVisible = False;
		if (InputPlayer != Null) {
			switch (InputPlayer.RaceState) {
				case CTmMlPlayer::ERaceState::BeforeStart : ClockVisible = True;
				case CTmMlPlayer::ERaceState::Running : ClockVisible = True;
				default : ClockVisible = False;
			}
		}
		Frame_Speedometer.Visible = ClockVisible;
		
		// ---------------------------------- //
		// Clock is visible
		if (ClockVisible) {
			// ---------------------------------- //
			// Set clock speed
			ClockRatio = InputPlayer.Speed * 3.6 / 1000 * 2.5;
			if (ClockRatio < 0) ClockRatio *= -1;
			
			// ---------------------------------- //
			// Trigger animation
			if (ClockRatio != PrevRatio) {
				foreach (Trigger in C_FlameTriggerRatios)
					if (ClockRatio > Trigger && PrevRatio <= Trigger || ClockRatio < Trigger && PrevRatio >= Trigger) AnimStart = Now;
				PrevRatio = ClockRatio;
			}
			
			// ---------------------------------- //
			// Animate clock
			if (Now <= AnimStart + 250) Frame_Speedometer.RelativeScale = AL::EaseOutCirc(Now - AnimStart, 0., 1., 250);
			
			// ---------------------------------- //
			// Set clock rotation
			foreach (I => Quad in ClockQuads) {
				if (ClockRatio < C_HalfClockRatio[I]) Quad.RelativeRotation = -180. * (I+1)%2;
				else if (ClockRatio < C_HalfClockRatio[I+1]) Quad.RelativeRotation = -180 + ClockRatio * 360;
				else Quad.RelativeRotation = 180. * I%2;
			}
			
			// ---------------------------------- //
			// Color
			declare Vec3 Color;
			if (ClockRatio <= .5) Color = <1., ClockRatio * 2, 0.>;
			else if (ClockRatio <= 1.) Color = <1., 1., 0.>;
			else if (ClockRatio <= 1.25) Color = <1 - ((ClockRatio-1) * 4), 1., 0.>;
			else if (ClockRatio <= 1.5) Color = <0., 1., (ClockRatio-1.25) * 4>;
			else if (ClockRatio < 2.5) Color = <(ClockRatio-1.5) * 1, 1 - (ClockRatio-1.5), 1.>;
			else Color = <ML::Rand(0., 1.), ML::Rand(0., 1.), ML::Rand(0., 1.)>;
			foreach (Quad in ClockQuads) Quad.Colorize = Color;
			
			// ---------------------------------- //
			// Label speed
			Label_Speed.Value = TL::FormatInteger(ML::FloorInteger(ClockRatio / 2.5 * 1000), 3);
			if (Label_Speed.Value == "000") Label_Speed.Opacity = .5 + ML::Sin(Now / 100.) * .5;
			else Label_Speed.Opacity = 1.;
			if (Label_Speed.Value == "1000") Label_Speed.Value = ":)";
		}
	}
}
--></script>
</manialink>
	""";
}
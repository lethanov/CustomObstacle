#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "Libs/Lethan/ObstacleManialinks.Script.txt" as Manialinks

declare Ident G_LayerInterfaceId;

declare CSmMapLandmark[Integer] G_Checkpoints;

declare Integer[Integer] G_BestCheckpointsTime;
declare Integer[Integer] G_BestIntCheckpointsTime;
declare Integer G_BestPlayerTime;


Ident GetPlayerId(Text _Login){
	declare Ident valueReturned;
	foreach (Player in Players) {
		if (Player.Login == _Login) {
			valueReturned = Player.Id;
			break;
		}
	}
	return valueReturned;
}

Integer GetCheckpointProgress(Ident _PlayerId){
	declare _CurrentCheckpoint = -1;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer CurrentCheckpoint for Player;

			_CurrentCheckpoint = CurrentCheckpoint;
		}
	}

	return _CurrentCheckpoint;
}

Integer GetPlace(Ident _PlayerId){
	declare value = 0;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Integer[] Times;
			declare Player = AllPlayers[_PlayerId];
			declare Integer LastTime for Player;

			Times.add(LastTime);

			foreach(OtherPlayer, AllPlayers){
				declare Integer BestTime for OtherPlayer;

				if(BestTime != -1 && OtherPlayer.Id != _PlayerId){
					Times.add(BestTime);
				}
			}

			Times = Times.sort();

			value = Times.keyof(LastTime);
		}
	}

	return value;
}

Integer CalculateTheorical(Ident _PlayerId){
	declare Theorical = 0;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer[Integer] CheckpointsBestIntTime for Player;

			foreach(LocalTime, CheckpointsBestIntTime){
				Theorical += LocalTime;
			}
		}
	}

	return Theorical;
}

Integer CalculateBestTheorical(){
	declare BestTheorical = 0;
	foreach(LocalTime, G_BestIntCheckpointsTime){
		BestTheorical += LocalTime;
	}
	return BestTheorical;
}

Integer GetCheckpointObjective(Ident _PlayerId){
	declare _CheckpointObjective = -1;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer CurrentCheckpoint for Player;

			_CheckpointObjective = CurrentCheckpoint + 1;
		}
	}

	return _CheckpointObjective;
}

Integer GetRespawnsCount(Ident _PlayerId){
	declare _RespawnsCount = -1;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer Respawns for Player;

			_RespawnsCount = Respawns;
		}
	}

	return _RespawnsCount;
}

Void UpdateMarkers(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare UI <=> UIManager.GetUI(Player);
			declare netread Text Net_PlayerSpectate for UI;
			declare netread Text Net_PlayerSpectateManual for UI;

			declare CSmPlayer PlayerTarget for Player;
			
			declare Integer CurrentCheckpoint for PlayerTarget;
			declare Boolean RaceStarted for PlayerTarget;

			UI.MarkersXML = "";
			if(RaceStarted){
				if(GetCheckpointObjective(PlayerTarget.Id) == G_Checkpoints.count){
					UI.MarkersXML = """<marker label="Goal" pos="{{{G_Checkpoints[GetCheckpointObjective(PlayerTarget.Id)].Position.X}}} {{{G_Checkpoints[GetCheckpointObjective(PlayerTarget.Id)].Position.Y + 2}}} {{{G_Checkpoints[GetCheckpointObjective(PlayerTarget.Id)].Position.Z}}}" />""";	
				} else {
					if(G_Checkpoints.existskey(GetCheckpointObjective(PlayerTarget.Id))){
						UI.MarkersXML = """<marker label="Checkpoint {{{GetCheckpointObjective(PlayerTarget.Id)}}}" pos="{{{G_Checkpoints[GetCheckpointObjective(PlayerTarget.Id)].Position.X}}} {{{G_Checkpoints[GetCheckpointObjective(PlayerTarget.Id)].Position.Y + 2}}} {{{G_Checkpoints[GetCheckpointObjective(PlayerTarget.Id)].Position.Z}}}" />""";
					}
				}
			}
		}
	}
}

Integer GetTime(Ident _PlayerId){
	declare Time = 0;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];	
			declare Integer PlayerStartTime for Player;
			declare Boolean RaceStarted for Player;
			
			if(RaceStarted)	Time = Now - PlayerStartTime;
		}
	}
	return Time;
}

Integer GetLastTime(Ident _PlayerId){
	declare Time = 0;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];	
			declare Integer LastTime for Player;
			
			Time = LastTime;
		}
	}
	return Time;
}

Integer GetBestTime(Ident _PlayerId){
	declare _BestTime = 0;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];	
			declare Integer BestTime for Player;
			
			_BestTime = BestTime;
		}
	}
	return _BestTime;
}

Integer GetBestTimeDiff(Ident _PlayerId){
	declare _BestTimeDiff = 0;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];	
			declare Integer BestTimeDiff for Player;
			
			_BestTimeDiff = BestTimeDiff;
		}
	}
	return _BestTimeDiff;
}

Integer GetBestTimeDiffAll(Ident _PlayerId){
	declare _BestTimeDiff = 0;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];	
			declare Integer BestTimeDiffAll for Player;
			
			_BestTimeDiff = BestTimeDiffAll;
		}
	}
	return _BestTimeDiff;
}

Boolean IsRaceStarted(Ident _PlayerId){
	declare _IsRaceStarted = False;

	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Boolean RaceStarted for Player;

			_IsRaceStarted = RaceStarted;
		}
	}

	return _IsRaceStarted;	
}

Boolean IsMapFinishedBySomeone(){
	declare Boolean value;
	value = False;
	declare finishCount = 0;
	foreach(Player, Players){
		declare Integer Finishs for Player;
		if(Finishs > 0){
			value = True;
		}
	}
	return value;
}

Void UpdateScoresTable(){
	//All
	declare netwrite Integer Net_BestTheorical for Teams[0];
	Net_BestTheorical = CalculateBestTheorical();

	//Score table
	declare netwrite Text[] Net_PlayersTimeData for Teams[0];
	
	Net_PlayersTimeData.clear();

	declare Integer[Ident] Times;
	declare CSmPlayer[] PlayersWithNoTime;

	Times = Integer[Ident];
	PlayersWithNoTime.clear();

	
	foreach(Player, Players){
		if(GetBestTime(Player.Id) != -1){
			Times[Player.Id] = GetBestTime(Player.Id);
		} else {
			PlayersWithNoTime.add(Player);
		}
	}

	Times = Times.sort();

	foreach(Time, Times){
		declare Player = Players[Times.keyof(Time)];
		declare data = Player.Login ^ "|" ^ Time ^ "|" ^ GetCheckpointProgress(Player.Id) ^ "|" ^ GetRespawnsCount(Player.Id);
		Net_PlayersTimeData.add(data);
	}

	foreach(OtherPlayer, PlayersWithNoTime){
		declare data = OtherPlayer.Login ^ "|" ^ -1 ^ "|" ^ GetCheckpointProgress(OtherPlayer.Id) ^ "|" ^ GetRespawnsCount(OtherPlayer.Id);
		Net_PlayersTimeData.add(data);
	}
}

Void UpdateSpectatorCount(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer SpecCount for Player;

			SpecCount = 0;
			foreach(OtherPlayer, AllPlayers){
				if(OtherPlayer.Login != Player.Login){
					declare UI2 <=> UIManager.GetUI(OtherPlayer);
					declare netread Text Net_PlayerSpectate for UI2;
					declare netread Text Net_PlayerSpectateManual for UI2;
					if(Net_PlayerSpectate == Player.Login || Net_PlayerSpectateManual == Player.Login){
						SpecCount += 1;
					}
				}
			}
		}
	}
}

Void UpdatePlayerDataManialink(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare CSmPlayer PlayerTarget for Player;
			
			declare Integer PlayerStartTime for PlayerTarget;
			declare Boolean RaceStarted for PlayerTarget;

			declare Boolean HasAmmo for PlayerTarget;
			declare Boolean AmmoRegen for PlayerTarget;
			declare Boolean AmmoUnlimited for PlayerTarget;
			declare Boolean StaminaUnlimited for PlayerTarget;
			declare Boolean StaminaRegen for PlayerTarget;

			declare Integer BestTime for PlayerTarget;
			declare Integer Runs for PlayerTarget;
			declare Integer Finishs for PlayerTarget;
			declare Integer Respawns for PlayerTarget;

			declare Integer ShotsFired for PlayerTarget;
			declare Integer StaminaUsed for PlayerTarget;
			declare Real MaxSpeed for PlayerTarget;
			declare Integer Place for PlayerTarget;
			declare Integer Theorical for PlayerTarget;

			declare Integer SpecCount for PlayerTarget;

			declare UI <=> UIManager.GetUI(Player);

			
			declare netwrite Integer Net_PlayerStartTime for UI;
			declare netwrite Boolean Net_Running for UI;

			declare netwrite Boolean Net_HasAmmo for UI;
			declare netwrite Boolean Net_AmmoUnlimited for UI;
			declare netwrite Boolean Net_AmmoRegen for UI;
			declare netwrite Boolean Net_StaminaUnlimited for UI;
			declare netwrite Boolean Net_StaminaRegen for UI;

			declare netwrite Boolean Net_RespawnAtStart for UI;

			declare netwrite Integer Net_BestTime for UI;
			declare netwrite Integer Net_Runs for UI;
			declare netwrite Integer Net_Finishs for UI;
			declare netwrite Integer Net_Respawns for UI;

			declare netwrite Integer Net_ShotsFired for UI;
			declare netwrite Integer Net_StaminaUsed for UI;
			declare netwrite Integer Net_CheckpointProgress for UI;
			declare netwrite Real Net_MaxSpeed for UI;
			declare netwrite Integer Net_Place for UI;
			declare netwrite Integer Net_Theorical for UI;

			declare netwrite Integer Net_SpecCount for UI;

			Net_PlayerStartTime = PlayerStartTime;
			Net_Running = RaceStarted;

			Net_HasAmmo = HasAmmo;
			Net_AmmoUnlimited = AmmoUnlimited;
			Net_AmmoRegen = AmmoRegen;
			Net_StaminaUnlimited = StaminaUnlimited;
			Net_StaminaRegen = StaminaRegen;

			Net_BestTime = BestTime;
			Net_Runs = Runs;
			Net_Finishs = Finishs;
			Net_Respawns = Respawns;

			Net_ShotsFired = ShotsFired;
			Net_StaminaUsed = StaminaUsed;
			Net_CheckpointProgress = GetCheckpointProgress(PlayerTarget.Id);
			Net_MaxSpeed = MaxSpeed;
			Net_Place = Place;
			Net_Theorical = Theorical;

			Net_SpecCount = SpecCount;

			UpdateMarkers(_PlayerId);
		}
	}
}

Boolean IsCheckpointOldType3(Ident _PlayerId){
	declare value = False;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare _Player = AllPlayers[_PlayerId];
			declare UI <=> UIManager.GetUI(_Player);

			if(G_Checkpoints[GetCheckpointProgress(_PlayerId)].Tag == "CheckpointType3"){
				value = True;
			}
		}
	}
	return value;
}

Void UpdatePlayerStuff(Ident _PlayerId, Boolean _FastRespawn){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare _Player = AllPlayers[_PlayerId];
		
			declare Boolean StaminaUnlimited for _Player;
			declare Boolean StaminaRegen for _Player;
			declare Boolean HasAmmo for _Player;
			declare Boolean AmmoUnlimited for _Player;
			declare Boolean AmmoRegen for _Player;

			if(G_Checkpoints.existskey(GetCheckpointProgress(_PlayerId))){
				declare CheckpointTag = G_Checkpoints[GetCheckpointProgress(_PlayerId)].Tag;
				
				declare AnchorDetails = TextLib::Split("|", CheckpointTag);

				if(AnchorDetails.count > 1){
					//Ammo
					if(TextLib::ToInteger(AnchorDetails[1]) == 11){ //Unlimited ammo !
						if(AmmoUnlimited != True){
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 20);
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 20);
							_Player.AmmoGain = 10.0;
							HasAmmo = True;
							AmmoUnlimited = True;
							AmmoRegen = True;
						}
					} else {
						AmmoUnlimited = False;
						if(GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket) != TextLib::ToInteger(AnchorDetails[1]) || _FastRespawn){
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, TextLib::ToInteger(AnchorDetails[1]));
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, TextLib::ToInteger(AnchorDetails[1]));	
						}
											
						_Player.AmmoGain = 1.0;
						if(AnchorDetails.count > 4){
							//Ammo regeneration
							if(TextLib::ToInteger(AnchorDetails[4]) == 1){
								_Player.AmmoGain = 1.0;
								AmmoRegen = True;
							} else {
								_Player.AmmoGain = 0.0;
								AmmoRegen = False;
							}
						}

						if(TextLib::ToInteger(AnchorDetails[1]) == 0){
							HasAmmo = False;
						} else {
							HasAmmo = True;
						}
					}
					//Stamina
					if(TextLib::ToInteger(AnchorDetails[2]) == 0){
						StaminaUnlimited = False;
						StaminaRegen = True;
						_Player.StaminaGain = 1.0;
					} else if(TextLib::ToInteger(AnchorDetails[2]) == 1 && _Player.Stamina < 3600){
						StaminaUnlimited = False;
						StaminaRegen = True;
						_Player.Stamina = 3600;
						_Player.StaminaGain = 1.0;
					} else if(TextLib::ToInteger(AnchorDetails[2]) == 2){
						StaminaUnlimited = True;
						_Player.Stamina = 3600;
					}
					
					if(!StaminaUnlimited){
						//Stamina regeneration
						if(TextLib::ToInteger(AnchorDetails[3]) == 0){
							_Player.StaminaGain = 0.0;
							_Player.Stamina = 3600;
							StaminaRegen = False;
						}
						if(TextLib::ToInteger(AnchorDetails[3]) == 1){
							_Player.StaminaGain = 1.0;
							StaminaRegen = True;
						}
					}
				} else {
					HasAmmo = True;
					AmmoRegen = True;
					StaminaRegen = True;
					StaminaUnlimited = False;
					_Player.AmmoGain = 1.0;
					if(TextLib::SubText(CheckpointTag, 0, 10) == "Checkpoint"){
						if(TextLib::SubText(CheckpointTag, 10, 5) == "Type2"){

							AmmoUnlimited = True;
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 10);
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 10);
							_Player.AmmoGain = 10.0;
						} else if(TextLib::SubText(CheckpointTag, 10, 5) == "Type1"){
							AmmoUnlimited = False;
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 0);
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 0);
							_Player.AmmoGain = 0.0;
							HasAmmo = False;
						} else {
							AmmoUnlimited = False;
							if(GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket) != 4 || _FastRespawn){
								SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
								SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 4);
								_Player.AmmoGain = 1.0;
								_Player.StaminaGain = 1.0;
							}
						}
					}
				}
			} else {
				HasAmmo = True;
				AmmoRegen = True;
				StaminaRegen = True;
				StaminaUnlimited = False;
				SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
				SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 4);
				_Player.AmmoGain = 1.0;
				_Player.StaminaGain = 1.0;
			}
		}
	}
}

Integer GetLastCPDiff(Ident _PlayerId){
	declare Integer valueReturn;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer CurrentCheckpoint for Player;
			declare Integer[Integer] CheckpointsTimeDiff for Player;
			if(CheckpointsTimeDiff.existskey(CurrentCheckpoint)){
				valueReturn = CheckpointsTimeDiff[CurrentCheckpoint];
			}
		}
	}
	return valueReturn;
}

Integer GetLastCPDiffBest(Ident _PlayerId){
	declare Integer valueReturn;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer CurrentCheckpoint for Player;
			declare Integer[Integer] CheckpointsBestTimeDiff for Player;
			
			if(CheckpointsBestTimeDiff.existskey(CurrentCheckpoint)){
				valueReturn = CheckpointsBestTimeDiff[CurrentCheckpoint];
			}
		}
	}
	return valueReturn;
}

Void OnShoot(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer ShotsFired for Player;

			ShotsFired += 1; 
		}
	}
}

Void CalculateTime(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];

			declare Integer BestTime for Player;
			declare Integer BestTimeDiff for Player;
			declare Integer BestTimeDiffAll for Player;
			declare Integer LastTime for Player;

			LastTime = GetTime(_PlayerId);

			if(BestTime != -1){
				BestTimeDiff = GetTime(_PlayerId) - BestTime;
				if(BestTimeDiff < 0){
					BestTime = GetTime(_PlayerId);
				}
				BestTimeDiffAll = GetTime(_PlayerId) - G_BestPlayerTime;
				if(BestTimeDiffAll < 0){
					G_BestPlayerTime = BestTime;
				}
			} else {
				BestTime = GetTime(_PlayerId);
				if(G_BestPlayerTime == -1){
					G_BestPlayerTime = BestTime;
				}
			}
		}
	}
}

Boolean IsNotHisFirstRun(Ident _PlayerId){
	declare notFirstRun = True;
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer Finishs for Player;

			if(Finishs == 0){
				notFirstRun = False;
			}
		}
	}
	return notFirstRun;
}

Void RespawnPlayerAtLastCP(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			if(G_Checkpoints.existskey(GetCheckpointProgress(_PlayerId))){
				declare Player = AllPlayers[_PlayerId];
				declare Integer Respawns for Player;

				Respawns += 1;

				UpdatePlayerStuff(_PlayerId, True);
		
				UpdateScoresTable();
				RespawnPlayer(Player, G_Checkpoints[GetCheckpointProgress(_PlayerId)]);
				UpdatePlayerDataManialink(_PlayerId);
			}
		}
	}
}

Void RespawnPlayer(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Boolean RaceStarted for Player;
			declare Integer Respawns for Player;
			declare Integer CurrentCheckpoint for Player;

			RaceStarted = False;
			Respawns = 0;
			CurrentCheckpoint = 0;

			UpdatePlayerDataManialink(_PlayerId);
		}
	}
}

Void DoCheckpointProgress(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer CurrentCheckpoint for Player;
			declare Integer PlayerStartTime for Player;
			declare Integer[Integer] CheckpointsTime for Player;
			declare Integer[Integer] CheckpointsTimeDiff for Player;
			declare Integer[Integer] CheckpointsBestTime for Player;
			declare Integer[Integer] CheckpointsBestTimeDiff for Player;

			CheckpointsTime[GetCheckpointObjective(_PlayerId)] = Now - PlayerStartTime;

			//Check if checkpoint time is best personnal
			if(CheckpointsBestTime.existskey(GetCheckpointObjective(_PlayerId))){
				//Get diff between best and current
				CheckpointsTimeDiff[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)] - CheckpointsBestTime[GetCheckpointObjective(_PlayerId)];
				if(CheckpointsTimeDiff[GetCheckpointObjective(_PlayerId)] < 0){
					CheckpointsBestTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
				}
			} else {
				CheckpointsBestTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
			}

			//Check if checkpoit time is best all players
			if(G_BestCheckpointsTime.existskey(GetCheckpointObjective(_PlayerId))){
				//Get diff between best all and current
				CheckpointsBestTimeDiff[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)] - G_BestCheckpointsTime[GetCheckpointObjective(_PlayerId)];
				if(CheckpointsBestTimeDiff[GetCheckpointObjective(_PlayerId)] < 0){
					G_BestCheckpointsTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
				}
			} else {
				G_BestCheckpointsTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
			}

			//For theorical stuff
			declare Integer StartLocalTime for Player;
			declare Integer[Integer] CheckpointsIntTime for Player;
			declare Integer[Integer] CheckpointsBestIntTime for Player;

			CheckpointsIntTime[GetCheckpointObjective(_PlayerId)] = Now - StartLocalTime;

			//Check if checkpoint local time is best personnal
			if(CheckpointsBestIntTime.existskey(GetCheckpointObjective(_PlayerId))){
				if(CheckpointsIntTime[GetCheckpointObjective(_PlayerId)] < CheckpointsBestIntTime[GetCheckpointObjective(_PlayerId)]){
					CheckpointsBestIntTime[GetCheckpointObjective(_PlayerId)] = CheckpointsIntTime[GetCheckpointObjective(_PlayerId)];
				}
			} else {
				CheckpointsBestIntTime[GetCheckpointObjective(_PlayerId)] = CheckpointsIntTime[GetCheckpointObjective(_PlayerId)];
			}

			//Check if checkpoint local time is best all players
			if(G_BestIntCheckpointsTime.existskey(GetCheckpointObjective(_PlayerId))){
				if(CheckpointsIntTime[GetCheckpointObjective(_PlayerId)] < G_BestIntCheckpointsTime[GetCheckpointObjective(_PlayerId)]){
					G_BestIntCheckpointsTime[GetCheckpointObjective(_PlayerId)] = CheckpointsIntTime[GetCheckpointObjective(_PlayerId)];
				}
			} else {
				G_BestIntCheckpointsTime[GetCheckpointObjective(_PlayerId)] = CheckpointsIntTime[GetCheckpointObjective(_PlayerId)];
			}

			StartLocalTime = Now;

			CurrentCheckpoint += 1;
			UpdatePlayerStuff(_PlayerId, False);
			UpdatePlayerDataManialink(_PlayerId);
		}
	}
}

Void RaceStart(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Boolean RaceStarted for Player;
			declare Integer PlayerStartTime for Player;

			declare Boolean HasAmmo for Player;
			declare Boolean AmmoUnlimited for Player;

			declare Boolean StaminaUnlimited for Player;
			declare Boolean StaminaRegen for Player;
			declare Integer Runs for Player;
			declare Integer ShotsFired for Player;
			declare Integer LastStamina for Player;
			declare Integer StaminaUsed for Player;
			declare Real MaxSpeed for Player;
			declare Integer StartLocalTime for Player;

			RaceStarted = True;
			PlayerStartTime = Now;
			StartLocalTime = Now;
			HasAmmo = True;
			AmmoUnlimited = False;
			StaminaUnlimited = False;
			StaminaRegen = True;
			ShotsFired = 0;
			MaxSpeed = 0.0;
			LastStamina = 3600;
			StaminaUsed = 0;

			Runs += 1;

			UpdatePlayerStuff(_PlayerId, False);
			UpdatePlayerDataManialink(_PlayerId);
		}
	}
}

Void RaceFinish(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer Respawns for Player;
			declare Integer Finishs for Player;
			declare Boolean RaceStarted for Player;

			declare Integer Theorical for Player;
			declare Integer Place for Player;
			
			Respawns = 0;
			RaceStarted = False;
			Finishs += 1;
			Theorical = CalculateTheorical(_PlayerId);
			Place = GetPlace(_PlayerId) + 1;
			UpdatePlayerDataManialink(_PlayerId);

		}
	}
}

Void UpdatePlayerRawData(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare Integer LastStamina for Player;
			declare Integer StaminaUsed for Player;
			declare Boolean TrueSpectate for Player;
			declare Real MaxSpeed for Player;

			declare Text LastSpectator for Player;
			declare Text LastSpectatorManual for Player;
			declare CSmPlayer PlayerTarget for Player;

			if(LastStamina != Player.Stamina){
				if(LastStamina > Player.Stamina){
					StaminaUsed += LastStamina - Player.Stamina;
				}
				LastStamina = Player.Stamina;
			}

			if(MaxSpeed < Player.Speed){
				MaxSpeed = Player.Speed;
			}

			declare UI <=> UIManager.GetUI(Player);
			declare netread Text Net_PlayerSpectate for UI;
			declare netread Text Net_PlayerSpectateManual for UI;
			
			declare netwrite Boolean Net_TrueSpectate for UI;
	
			TrueSpectate = Player.RequestsSpectate;
			Net_TrueSpectate = TrueSpectate;
			
			if(Net_PlayerSpectate != "" && Net_PlayerSpectate != Player.Login){
				if(AllPlayers.existskey(GetPlayerId(Net_PlayerSpectate))){
					UI.ForceSpectator = True;
					UI.SpectatorForcedTarget = GetPlayerId(Net_PlayerSpectate);
					UI.SpectatorAutoTarget = GetPlayerId(Net_PlayerSpectate);
					PlayerTarget <=> AllPlayers[GetPlayerId(Net_PlayerSpectate)];
				} else {
					UI.ForceSpectator = False;
					UI.SpectatorForcedTarget = NullId;
					UI.SpectatorAutoTarget = NullId;
					PlayerTarget <=> Player;
				}
			} else {
				UI.ForceSpectator = False;
				UI.SpectatorForcedTarget = NullId;
				UI.SpectatorAutoTarget = NullId;
				PlayerTarget <=> Player;
				UpdateSpectatorCount(_PlayerId);
			}

			if(LastSpectator != Net_PlayerSpectate){
				LastSpectator = Net_PlayerSpectate;
				UpdatePlayerDataManialink(_PlayerId);
				UpdateSpectatorCount(_PlayerId);
			}
			if(LastSpectatorManual != Net_PlayerSpectateManual){
				LastSpectatorManual = Net_PlayerSpectateManual;
				if(LastSpectatorManual != ""){
					PlayerTarget <=> AllPlayers[GetPlayerId(Net_PlayerSpectateManual)];
					UpdatePlayerDataManialink(_PlayerId);
					UpdateSpectatorCount(_PlayerId);
				}
			}
		}
	}
}

Void Start(){
	G_BestPlayerTime = -1;
	G_BestCheckpointsTime = Integer[Integer];
	G_BestIntCheckpointsTime = Integer[Integer];

	foreach(Player, AllPlayers){
		declare Boolean RaceStarted for Player;
		declare Integer PlayerStartTime for Player;
		declare Integer Runs for Player;
		declare Integer Respawns for Player;
		declare Integer Finishs for Player;
		declare Integer CurrentCheckpoint for Player;
		declare Text RespawnKey for Player;

		declare Boolean HasAmmo for Player;
		declare Boolean AmmoUnlimited for Player;

		declare Boolean StaminaUnlimited for Player;
		declare Boolean StaminaRegen for Player;

		declare Integer BestTime for Player;
		declare Integer BestTimeDiff for Player;
		declare Integer BestTimeDiffAll for Player;
		declare Integer LastTime for Player;

		declare Integer LastStamina for Player;
		declare Integer StaminaUsed for Player;

		declare Real MaxSpeed for Player;

		declare Integer[Integer] CheckpointsTime for Player;
		declare Integer[Integer] CheckpointsTimeDiff for Player;
		declare Integer[Integer] CheckpointsBestTime for Player;
		declare Integer[Integer] CheckpointsBestTimeDiff for Player;

		//For theorical stuff
		declare Integer StartLocalTime for Player;
		declare Integer[Integer] CheckpointsIntTime for Player;
		declare Integer[Integer] CheckpointsBestIntTime for Player;

		declare Boolean AlreadyCreated for Player;
		declare Boolean TrueSpectator for Player;

		Runs = 0;
		Finishs = 0;
		BestTime = -1;
		//BestTime = MathLib::Rand(1000, 20000);
		BestTimeDiff = 0;
		BestTimeDiffAll = 0;

		Respawns = 0;
		TrueSpectator = False;

		CheckpointsTime = Integer[Integer];
		CheckpointsTimeDiff = Integer[Integer];
		CheckpointsBestTime = Integer[Integer];
		CheckpointsBestTimeDiff = Integer[Integer];

		CheckpointsIntTime = Integer[Integer];
		CheckpointsBestIntTime = Integer[Integer];
		AlreadyCreated = True;

		LastTime = -1;
		CurrentCheckpoint = 0;
		HasAmmo = True;
		AmmoUnlimited = False;
		StaminaUnlimited = False;
		StaminaRegen = True;
		LastStamina = 3600;
		StaminaUsed = 0;
		MaxSpeed = 0.0;
		RaceStarted = False;
		PlayerStartTime = 0;			
		RespawnKey = "Delete";
	}
}

Void Init(Ident _PlayerId, CSmMapLandmark[Integer] _Checkpoints){
	if(_PlayerId != NullId){
		if(AllPlayers.existskey(_PlayerId)){
			declare Player = AllPlayers[_PlayerId];
			declare CSmPlayer PlayerTarget for Player;

			declare Boolean RaceStarted for Player;
			declare Integer PlayerStartTime for Player;
			declare Integer Runs for Player;
			declare Integer Respawns for Player;
			declare Integer Finishs for Player;
			declare Integer CurrentCheckpoint for Player;
			declare Text RespawnKey for Player;

			declare Boolean HasAmmo for Player;
			declare Boolean AmmoUnlimited for Player;

			declare Boolean StaminaUnlimited for Player;
			declare Boolean StaminaRegen for Player;

			declare Integer BestTime for Player;
			declare Integer BestTimeDiff for Player;
			declare Integer BestTimeDiffAll for Player;
			declare Integer LastTime for Player;

			declare Integer LastStamina for Player;
			declare Integer StaminaUsed for Player;

			declare Real MaxSpeed for Player;

			declare Integer[Integer] CheckpointsTime for Player;
			declare Integer[Integer] CheckpointsTimeDiff for Player;
			declare Integer[Integer] CheckpointsBestTime for Player;
			declare Integer[Integer] CheckpointsBestTimeDiff for Player;

			//For theorical stuff
			declare Integer StartLocalTime for Player;
			declare Integer[Integer] CheckpointsIntTime for Player;
			declare Integer[Integer] CheckpointsBestIntTime for Player;

			declare Boolean AlreadyCreated for Player;
			
			if(!AlreadyCreated){
				Runs = 0;
				Finishs = 0;
				BestTime = -1;
				BestTimeDiff = 0;
				BestTimeDiffAll = 0;
				
				Respawns = 0;

				CheckpointsTime = Integer[Integer];
				CheckpointsTimeDiff = Integer[Integer];
				CheckpointsBestTime = Integer[Integer];
				CheckpointsBestTimeDiff = Integer[Integer];

				CheckpointsIntTime = Integer[Integer];
				CheckpointsBestIntTime = Integer[Integer];
				AlreadyCreated = True;
			}

			LastTime = -1;
			CurrentCheckpoint = 0;
			HasAmmo = True;
			AmmoUnlimited = False;
			StaminaUnlimited = False;
			StaminaRegen = True;
			LastStamina = 3600;
			StaminaUsed = 0;
			MaxSpeed = 0.0;
			RaceStarted = False;
			PlayerStartTime = 0;			
			RespawnKey = "Delete";

			G_Checkpoints = _Checkpoints;

			PlayerTarget <=> Player;

			//For theorical stuff
			StartLocalTime = 0;

			declare UI <=> UIManager.GetUI(Player);

			if (!UI.UILayers.existskey(G_LayerInterfaceId)){
				declare LayerInterface <=> UIManager.UILayerCreate();
				LayerInterface.ManialinkPage = Manialinks::CreatePlayerInterface();
				G_LayerInterfaceId = LayerInterface.Id;
				UI.UILayers.add(UIManager.UILayers[G_LayerInterfaceId]);
			}

			UpdatePlayerDataManialink(_PlayerId);
		}
	}
}

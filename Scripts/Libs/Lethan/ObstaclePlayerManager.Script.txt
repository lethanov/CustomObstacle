#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "Libs/Lethan/ObstacleManialinks.Script.txt" as Manialinks

declare Ident G_LayerInterfaceId;

declare CSmMapLandmark[Integer] G_Checkpoints;

declare Integer[Integer] G_BestCheckpointsTime;
declare Integer G_BestPlayerTime;

Void Start(){
	G_BestPlayerTime = -1;
}

Integer GetCheckpointObjective(Ident _PlayerId){
	declare _CheckpointObjective = -1;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer CurrentCheckpoint for Player;

			_CheckpointObjective = CurrentCheckpoint + 1;
		}
	}

	return _CheckpointObjective;
}

Void UpdateMarkers(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare UI <=> UIManager.GetUI(Player);
			declare Integer CurrentCheckpoint for Player;
			declare Boolean RaceStarted for Player;

			UI.MarkersXML = "";
			if(RaceStarted){
				if(GetCheckpointObjective(_PlayerId) == G_Checkpoints.count){
					UI.MarkersXML = """<marker label="Goal" pos="{{{G_Checkpoints[GetCheckpointObjective(_PlayerId)].Position.X}}} {{{G_Checkpoints[GetCheckpointObjective(_PlayerId)].Position.Y + 2}}} {{{G_Checkpoints[GetCheckpointObjective(_PlayerId)].Position.Z}}}" />""";	
				} else {
					if(G_Checkpoints.existskey(GetCheckpointObjective(_PlayerId))){
						UI.MarkersXML = """<marker label="Checkpoint {{{GetCheckpointObjective(_PlayerId)}}}" pos="{{{G_Checkpoints[GetCheckpointObjective(_PlayerId)].Position.X}}} {{{G_Checkpoints[GetCheckpointObjective(_PlayerId)].Position.Y + 2}}} {{{G_Checkpoints[GetCheckpointObjective(_PlayerId)].Position.Z}}}" />""";
					}
				}
			}
		}
	}
}

Integer GetTime(Ident _PlayerId){
	declare Time = 0;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];	
			declare Integer PlayerStartTime for Player;
			declare Boolean RaceStarted for Player;
			
			if(RaceStarted)	Time = Now - PlayerStartTime;
		}
	}
	return Time;
}

Integer GetLastTime(Ident _PlayerId){
	declare Time = 0;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];	
			declare Integer LastTime for Player;
			
			Time = LastTime;
		}
	}
	return Time;
}

Integer GetBestTime(Ident _PlayerId){
	declare _BestTime = 0;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];	
			declare Integer BestTime for Player;
			
			_BestTime = BestTime;
		}
	}
	return _BestTime;
}

Integer GetBestTimeDiff(Ident _PlayerId){
	declare _BestTimeDiff = 0;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];	
			declare Integer BestTimeDiff for Player;
			
			_BestTimeDiff = BestTimeDiff;
		}
	}
	return _BestTimeDiff;
}

Integer GetBestTimeDiffAll(Ident _PlayerId){
	declare _BestTimeDiff = 0;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];	
			declare Integer BestTimeDiffAll for Player;
			
			_BestTimeDiff = BestTimeDiffAll;
		}
	}
	return _BestTimeDiff;
}

Integer GetCheckpointProgress(Ident _PlayerId){
	declare _CurrentCheckpoint = -1;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer CurrentCheckpoint for Player;

			_CurrentCheckpoint = CurrentCheckpoint;
		}
	}

	return _CurrentCheckpoint;
}

Integer GetPlace(Ident _PlayerId){
	declare value = 0;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Integer[] Times;
			foreach(OtherPlayer, Players){
				declare Integer LastTime for OtherPlayer;
				declare Integer BestTime for OtherPlayer;

				if(OtherPlayer.Id != _PlayerId){
					Times.add(BestTime);
				} else {
					Times.add(LastTime);
				}
			}

			Times = Times.sort();

			declare Player = Players[_PlayerId];
			declare Integer LastTime for Player;

			value = Times.keyof(LastTime);
		}
	}

	return value;
}

Integer CalculateTheorical(Ident _PlayerId){
	declare Theorical = 0;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer[Integer] CheckpointsBestIntTime for Player;

			foreach(LocalTime, CheckpointsBestIntTime){
				Theorical += LocalTime;
			}
		}
	}

	return Theorical;
}

Void SendUpdateForManialink(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer PlayerStartTime for Player;
			declare UI <=> UIManager.GetUI(Player);
			declare Boolean RaceStarted for Player;
			declare Integer CurrentCheckpoint for Player;

			declare Boolean HasAmmo for Player;
			declare Boolean AmmoUnlimited for Player;
			declare Boolean AmmoRegen for Player;

			declare Boolean StaminaUnlimited for Player;
			declare Boolean StaminaRegen for Player;

			declare Integer BestTime for Player;

			declare Integer Runs for Player;
			declare Integer Finishs for Player;
			declare Integer Respawns for Player;

			declare Integer ShotsFired for Player;

			declare Integer StaminaUsed for Player;
			declare Real MaxSpeed for Player;

			declare Integer Theorical for Player;

			Theorical = CalculateTheorical(_PlayerId);

			//For manialink communication

			//Interface
			declare netwrite Boolean Net_Running for UI;
			declare netwrite Integer Net_CheckpointProgress for UI;
			declare netwrite Integer Net_CheckpointObjective for UI;
			declare netwrite Integer Net_PlayerStartTime for UI;
			declare netwrite Boolean Net_HasAmmo for UI;
			declare netwrite Boolean Net_AmmoUnlimited for UI;
			declare netwrite Boolean Net_AmmoRegen for UI;
			declare netwrite Boolean Net_StaminaUnlimited for UI;
			declare netwrite Boolean Net_StaminaRegen for UI;
			declare netwrite Integer Net_BestTime for UI;
			declare netwrite Integer Net_Runs for UI;
			declare netwrite Integer Net_Finishs for UI;
			declare netwrite Integer Net_Respawns for UI;
			declare netwrite Integer Net_ShotsFired for UI;
			declare netwrite Integer Net_StaminaUsed for UI;
			declare netwrite Real Net_MaxSpeed for UI;
			declare netwrite Integer Net_Place for UI;
			declare netwrite Integer Net_Theorical for UI;

			Net_Running = RaceStarted;
			Net_CheckpointProgress = GetCheckpointProgress(_PlayerId);
			Net_CheckpointObjective = GetCheckpointObjective(_PlayerId);
			Net_PlayerStartTime = PlayerStartTime;
			Net_HasAmmo = HasAmmo;
			Net_AmmoUnlimited = AmmoUnlimited;
			Net_StaminaUnlimited = StaminaUnlimited;
			Net_StaminaRegen = StaminaRegen;
			Net_BestTime = BestTime;
			Net_Runs = Runs;
			Net_Finishs = Finishs;
			Net_Respawns = Respawns;
			Net_ShotsFired = ShotsFired;
			Net_StaminaUsed = StaminaUsed;
			Net_AmmoRegen = AmmoRegen;
			Net_MaxSpeed = MaxSpeed;
			Net_Place = GetPlace(_PlayerId) + 1;
			Net_Theorical = Theorical;

			//Score table
			declare netwrite Text[] Net_PlayersTimeData for Teams[0];

			Net_PlayersTimeData.clear();

			declare Integer[Ident] Times;
			declare CSmPlayer[] PlayersWithNoTime;

			Times = Integer[Ident];
			PlayersWithNoTime.clear();

			foreach(Player, Players){
				if(GetBestTime(Player.Id) != -1){
					Times[Player.Id] = GetBestTime(Player.Id);
				} else {
					PlayersWithNoTime.add(Player);
				}
			}

			Times = Times.sort();

			foreach(Time, Times){
				declare Player = Players[Times.keyof(Time)];
				declare data = Player.Login ^ "|" ^ Time ^ "|" ^ GetCheckpointProgress(Player.Id);
				Net_PlayersTimeData.add(data);
			}

			foreach(OtherPlayer, PlayersWithNoTime){
				declare data = OtherPlayer.Login ^ "|" ^ -1 ^ "|" ^ GetCheckpointProgress(OtherPlayer.Id);
				Net_PlayersTimeData.add(data);
			}
		}
	}
}

Void Update(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer LastStamina for Player;
			declare Integer StaminaUsed for Player;
			declare Real MaxSpeed for Player;

			if(LastStamina != Player.Stamina){
				if(LastStamina > Player.Stamina){
					StaminaUsed += LastStamina - Player.Stamina;
				}
				LastStamina = Player.Stamina;
			}

			if(MaxSpeed < Player.Speed){
				MaxSpeed = Player.Speed;
			}
		}
	}
}

Void RespawnPlayer(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Boolean RaceStarted for Player;
			declare Integer Respawns for Player;
			declare Integer CurrentCheckpoint for Player;

			RaceStarted = False;
			Respawns = 0;
			CurrentCheckpoint = 0;

			SendUpdateForManialink(_PlayerId);
			UpdateMarkers(_PlayerId);
		}
	}
}

Void Init(Ident _PlayerId, CSmMapLandmark[Integer] _Checkpoints){
	declare LayerInterface <=> UIManager.UILayerCreate();
	LayerInterface.ManialinkPage = Manialinks::CreatePlayerInterface();
	G_LayerInterfaceId = LayerInterface.Id;

	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Boolean RaceStarted for Player;
			declare Integer PlayerStartTime for Player;
			declare Integer Runs for Player;
			declare Integer Respawns for Player;
			declare Integer Finishs for Player;
			declare Integer CurrentCheckpoint for Player;
			declare Text RespawnKey for Player;

			declare Boolean HasAmmo for Player;
			declare Boolean AmmoUnlimited for Player;

			declare Boolean StaminaUnlimited for Player;
			declare Boolean StaminaRegen for Player;

			declare Integer BestTime for Player;
			declare Integer BestTimeDiff for Player;
			declare Integer BestTimeDiffAll for Player;
			declare Integer LastTime for Player;

			declare Integer LastStamina for Player;
			declare Integer StaminaUsed for Player;

			declare Real MaxSpeed for Player;

			declare Integer[Integer] CheckpointsTime for Player;
			declare Integer[Integer] CheckpointsTimeDiff for Player;
			declare Integer[Integer] CheckpointsBestTime for Player;
			declare Integer[Integer] CheckpointsBestTimeDiff for Player;

			//For theorical stuff
			declare Integer StartLocalTime for Player;
			declare Integer[Integer] CheckpointsIntTime for Player;
			declare Integer[Integer] CheckpointsBestIntTime for Player;

			RaceStarted = False;
			PlayerStartTime = 0;
			Runs = 0;
			//BestTime = MathLib::Rand(10000, 20000); //Testing purposes
			BestTime = -1;
			BestTimeDiff = 0;
			BestTimeDiffAll = 0;
			LastTime = -1;
			Respawns = 0;
			CurrentCheckpoint = 0;
			HasAmmo = True;
			AmmoUnlimited = False;
			StaminaUnlimited = False;
			StaminaRegen = True;
			LastStamina = 3600;
			StaminaUsed = 0;
			Finishs = 0;
			MaxSpeed = 0.0;

			RespawnKey = "Delete";

			G_Checkpoints = _Checkpoints;

			CheckpointsTime = Integer[Integer];
			CheckpointsTimeDiff = Integer[Integer];
			CheckpointsBestTime = Integer[Integer];
			CheckpointsBestTimeDiff = Integer[Integer];

			//For theorical stuff
			StartLocalTime = 0;

			CheckpointsIntTime = Integer[Integer];
			CheckpointsBestIntTime = Integer[Integer];

			declare UI <=> UIManager.GetUI(Player);
			if (UI.UILayers.existskey(G_LayerInterfaceId)) return;
			UI.UILayers.add(UIManager.UILayers[G_LayerInterfaceId]);

			SendUpdateForManialink(_PlayerId);
			UpdateMarkers(_PlayerId);
		}
	}
}

Boolean IsRaceStarted(Ident _PlayerId){
	declare _IsRaceStarted = False;

	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Boolean RaceStarted for Player;

			_IsRaceStarted = RaceStarted;
		}
	}

	return _IsRaceStarted;	
}

Boolean IsMapFinishedBySomeone(){
	declare Boolean value;
	value = False;
	declare finishCount = 0;
	foreach(Player, Players){
		declare Integer Finishs for Player;
		if(Finishs > 0){
			value = True;
		}
	}
	return value;
}

Void UpdatePlayerStuff(Ident _PlayerId, Boolean _FastRespawn){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare _Player = Players[_PlayerId];
		
			declare Boolean StaminaUnlimited for _Player;
			declare Boolean StaminaRegen for _Player;
			declare Boolean HasAmmo for _Player;
			declare Boolean AmmoUnlimited for _Player;
			declare Boolean AmmoRegen for _Player;

			if(G_Checkpoints.existskey(GetCheckpointProgress(_PlayerId))){
				declare CheckpointTag = G_Checkpoints[GetCheckpointProgress(_PlayerId)].Tag;
				
				declare AnchorDetails = TextLib::Split("|", CheckpointTag);
				

				if(AnchorDetails.count > 1){
					//Ammo
					if(TextLib::ToInteger(AnchorDetails[1]) == 11){ //Unlimited ammo !
						if(AmmoUnlimited != True){
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 20);
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 20);
							_Player.AmmoGain = 10.0;
							HasAmmo = True;
							AmmoUnlimited = True;
							AmmoRegen = True;
						}
					} else {
						AmmoUnlimited = False;
						if(GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket) != TextLib::ToInteger(AnchorDetails[1]) || _FastRespawn){
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, TextLib::ToInteger(AnchorDetails[1]));
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, TextLib::ToInteger(AnchorDetails[1]));	
						}
											
						_Player.AmmoGain = 1.0;
						if(AnchorDetails.count > 4){
							//Ammo regeneration
							if(TextLib::ToInteger(AnchorDetails[4]) == 1){
								_Player.AmmoGain = 1.0;
								AmmoRegen = True;
							} else {
								_Player.AmmoGain = 0.0;
								AmmoRegen = False;
							}
						}

						if(TextLib::ToInteger(AnchorDetails[1]) == 0){
							HasAmmo = False;
						} else {
							HasAmmo = True;
						}
					}
					//Stamina
					if(TextLib::ToInteger(AnchorDetails[2]) == 0){
						StaminaUnlimited = False;
						StaminaRegen = True;
						_Player.StaminaGain = 1.0;
					} else if(TextLib::ToInteger(AnchorDetails[2]) == 1 && _Player.Stamina < 3600){
						StaminaUnlimited = False;
						StaminaRegen = True;
						_Player.Stamina = 3600;
						_Player.StaminaGain = 1.0;
					} else if(TextLib::ToInteger(AnchorDetails[2]) == 2){
						StaminaUnlimited = True;
						_Player.Stamina = 3600;
					}
					
					if(!StaminaUnlimited){
						//Stamina regeneration
						if(TextLib::ToInteger(AnchorDetails[3]) == 0){
							_Player.StaminaGain = 0.0;
							_Player.Stamina = 3600;
							StaminaRegen = False;
						}
						if(TextLib::ToInteger(AnchorDetails[3]) == 1){
							_Player.StaminaGain = 1.0;
							StaminaRegen = True;
						}
					}
				} else {
					HasAmmo = True;
					AmmoRegen = True;
					StaminaRegen = True;
					StaminaUnlimited = False;
					_Player.AmmoGain = 1.0;
					if(TextLib::SubText(CheckpointTag, 0, 10) == "Checkpoint"){
						if(TextLib::SubText(CheckpointTag, 10, 5) == "Type2" && GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket) != 10){
							AmmoUnlimited = True;
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 10);
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 10);
							_Player.AmmoGain = 10.0;
						} else if(TextLib::SubText(CheckpointTag, 10, 5) == "Type1" && GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket) != 0){
							AmmoUnlimited = False;
							SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 0);
							SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 0);
							_Player.AmmoGain = 0.0;
							HasAmmo = False;
						} else {
							AmmoUnlimited = False;
							if(GetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket) != 4 || _FastRespawn){
								SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
								SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 4);
								_Player.AmmoGain = 1.0;
								_Player.StaminaGain = 1.0;
							}
						}
					}
				}
			} else {
				HasAmmo = True;
				AmmoRegen = True;
				StaminaRegen = True;
				StaminaUnlimited = False;
				SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
				SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 4);
				_Player.AmmoGain = 1.0;
				_Player.StaminaGain = 1.0;
			}
		}
	}
}

Integer GetLastCPDiff(Ident _PlayerId){
	declare Integer valueReturn;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer CurrentCheckpoint for Player;
			declare Integer[Integer] CheckpointsTimeDiff for Player;
			if(CheckpointsTimeDiff.existskey(CurrentCheckpoint)){
				valueReturn = CheckpointsTimeDiff[CurrentCheckpoint];
			}
		}
	}
	return valueReturn;
}

Integer GetLastCPDiffBest(Ident _PlayerId){
	declare Integer valueReturn;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer CurrentCheckpoint for Player;
			declare Integer[Integer] CheckpointsBestTimeDiff for Player;
			
			if(CheckpointsBestTimeDiff.existskey(CurrentCheckpoint)){
				valueReturn = CheckpointsBestTimeDiff[CurrentCheckpoint];
			}
		}
	}
	return valueReturn;
}

Void DoCheckpointProgress(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer CurrentCheckpoint for Player;
			declare Integer PlayerStartTime for Player;
			declare Integer[Integer] CheckpointsTime for Player;
			declare Integer[Integer] CheckpointsTimeDiff for Player;
			declare Integer[Integer] CheckpointsBestTime for Player;
			declare Integer[Integer] CheckpointsBestTimeDiff for Player;

			CheckpointsTime[GetCheckpointObjective(_PlayerId)] = Now - PlayerStartTime;

			//Check if checkpoint time is best personnal
			if(CheckpointsBestTime.existskey(GetCheckpointObjective(_PlayerId))){
				//Get diff between best and current
				CheckpointsTimeDiff[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)] - CheckpointsBestTime[GetCheckpointObjective(_PlayerId)];
				if(CheckpointsTimeDiff[GetCheckpointObjective(_PlayerId)] < 0){
					CheckpointsBestTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
				}
			} else {
				CheckpointsBestTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
			}

			//Check if checkpoit time is best all players
			if(G_BestCheckpointsTime.existskey(GetCheckpointObjective(_PlayerId))){
				//Get diff between best all and current
				CheckpointsBestTimeDiff[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)] - G_BestCheckpointsTime[GetCheckpointObjective(_PlayerId)];
				if(CheckpointsBestTimeDiff[GetCheckpointObjective(_PlayerId)] < 0){
					G_BestCheckpointsTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
				}
			} else {
				G_BestCheckpointsTime[GetCheckpointObjective(_PlayerId)] = CheckpointsTime[GetCheckpointObjective(_PlayerId)];
			}

			//For theorical stuff
			declare Integer StartLocalTime for Player;
			declare Integer[Integer] CheckpointsIntTime for Player;
			declare Integer[Integer] CheckpointsBestIntTime for Player;

			CheckpointsIntTime[GetCheckpointObjective(_PlayerId)] = Now - StartLocalTime;

			if(CheckpointsBestIntTime.existskey(GetCheckpointObjective(_PlayerId))){
				if(CheckpointsIntTime[GetCheckpointObjective(_PlayerId)] < CheckpointsBestIntTime[GetCheckpointObjective(_PlayerId)]){
					CheckpointsBestIntTime[GetCheckpointObjective(_PlayerId)] = CheckpointsIntTime[GetCheckpointObjective(_PlayerId)];
				}
			} else {
				CheckpointsBestIntTime[GetCheckpointObjective(_PlayerId)] = CheckpointsIntTime[GetCheckpointObjective(_PlayerId)];
			}

			StartLocalTime = Now;

			CurrentCheckpoint += 1;
			UpdatePlayerStuff(_PlayerId, False);
			SendUpdateForManialink(_PlayerId);
			UpdateMarkers(_PlayerId);
		}
	}
}

Void OnShoot(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer ShotsFired for Player;

			ShotsFired += 1; 
		}
	}
}

Void RaceStart(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Boolean RaceStarted for Player;
			declare Integer PlayerStartTime for Player;

			declare Boolean HasAmmo for Player;
			declare Boolean AmmoUnlimited for Player;

			declare Boolean StaminaUnlimited for Player;
			declare Boolean StaminaRegen for Player;
			declare Integer Runs for Player;
			declare Integer ShotsFired for Player;
			declare Integer LastStamina for Player;
			declare Integer StaminaUsed for Player;
			declare Real MaxSpeed for Player;
			declare Integer StartLocalTime for Player;

			RaceStarted = True;
			PlayerStartTime = Now;
			StartLocalTime = Now;
			HasAmmo = True;
			AmmoUnlimited = False;
			StaminaUnlimited = False;
			StaminaRegen = True;
			ShotsFired = 0;
			MaxSpeed = 0.0;
			LastStamina = 3600;
			StaminaUsed = 0;

			Runs += 1;

			UpdatePlayerStuff(_PlayerId, False);
			
			SendUpdateForManialink(_PlayerId);
			UpdateMarkers(_PlayerId);
		}
	}
}

Void CalculateTime(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];

			declare Integer BestTime for Player;
			declare Integer BestTimeDiff for Player;
			declare Integer BestTimeDiffAll for Player;
			declare Integer LastTime for Player;

			LastTime = GetTime(_PlayerId);

			if(BestTime != -1){
				BestTimeDiff = GetTime(_PlayerId) - BestTime;
				if(BestTimeDiff < 0){
					BestTime = GetTime(_PlayerId);
				}
				BestTimeDiffAll = GetTime(_PlayerId) - G_BestPlayerTime;
				if(BestTimeDiffAll < 0){
					G_BestPlayerTime = BestTime;
				}
			} else {
				BestTime = GetTime(_PlayerId);
				if(G_BestPlayerTime == -1){
					G_BestPlayerTime = BestTime;
				}
			}
		}
	}
}

Void RaceFinish(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer Respawns for Player;
			declare Integer Finishs for Player;
			declare Boolean RaceStarted for Player;
			
			Respawns = 0;
			RaceStarted = False;
			Finishs += 1;
			SendUpdateForManialink(_PlayerId);
		}
	}
}

Boolean IsNotHisFirstRun(Ident _PlayerId){
	declare notFirstRun = True;
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			declare Player = Players[_PlayerId];
			declare Integer Finishs for Player;

			if(Finishs == 0){
				notFirstRun = False;
			}
		}
	}
	return notFirstRun;
}

Void RespawnPlayerAtLastCP(Ident _PlayerId){
	if(_PlayerId != NullId){
		if(Players.existskey(_PlayerId)){
			if(G_Checkpoints.existskey(GetCheckpointProgress(_PlayerId))){
				declare Player = Players[_PlayerId];
				declare Integer Respawns for Player;

				Respawns += 1;

				UpdatePlayerStuff(_PlayerId, True);
		
				SendUpdateForManialink(_PlayerId);
				UpdateMarkers(_PlayerId);
				RespawnPlayer(Player, G_Checkpoints[GetCheckpointProgress(_PlayerId)]);
			}
		}
	}
}
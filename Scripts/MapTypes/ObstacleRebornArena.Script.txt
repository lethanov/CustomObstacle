#RequireContext CSmMapType

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType

declare Text Rules;
declare Integer LastCPUsed;

// ---------------------------------- //
// Verify anchors
// ---------------------------------- //
Void VerifyAnchors() {
	Anchor::UpdateAnchorCounts();
	
	declare Text errors;
	
	if (Anchor::GetCount("Goal") > 1){
		errors ^= "- You must place exactly one Goal.\n";
	}
	if (Anchor::GetCount("Spawn") > 1 || Anchor::GetCount("Spawn") == 0){
		errors ^= "- You must place exactly one Spawn.\n";
	}
		
	declare Integer checkpointCount;
	
	foreach(Anchor, AnchorData){
		if(Anchor.Tag == TextLib::SubText("Checkpoint", 0, 10)){
			checkpointCount += 1;
			if(Anchor.Order <= 0){
				errors ^= "- At least one checkpoint got a wrong order.\n";
				break;
			}
		} 
	}
	
	if(checkpointCount == 0){
		errors ^= "- You must place at least one Checkpoint.\n";
	}
	
	
	if(errors != ""){
		ManialinkText = """
			<frame posn="-75 35">
				<quad posn="-80 39 0" sizen="60 24" style="Bgs1" substyle="BgHealthBar"/>
				<label posn="-50 35 0" sizen="48 8" text="Requirements" halign="center" valign="center" style="TextTitle3" textsize="4" textcolor="229bffFF"/>
				<label posn="-50 24 0" sizen="57 21" text="The map is not validable because :{{{"\n" ^ errors}}}" valign="center" halign="center" autonewline="1" textsize="1"/>
			</frame>
			""";
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	} else {
		ManialinkText = "";
	}
}

// ---------------------------------- //
// Check if the map is valid
// ---------------------------------- //
Void UpdateValidability(){
	//Verify anchors
	VerifyAnchors();

	// Check checkpoint order
	declare CheckpointOrders = Integer[Integer];
	declare CheckpointCount = 0;
	foreach (Anchor in AnchorData) {
		if (Anchor.Tag == "Checkpoint") {
			CheckpointCount += 1;
			if (Anchor.Order <= 0) {
				ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
				//ValidabilityRequirementsMessage = _("At least one Checkpoint is wrong");
				return;
			}
			if (!CheckpointOrders.existskey(Anchor.Order)) {
				CheckpointOrders[Anchor.Order] = 1;
			} else {
				CheckpointOrders[Anchor.Order] += 1;
			}
		}
	}
}

// ---------------------------------- //
// If new checkpoint, add automaticly the next order to this cp.
// ---------------------------------- //
Void AutoOrderCheckpoint(){
	LastCPUsed = Anchor::GetCount("Checkpoint");
	LastCPUsed += Anchor::GetCount("Goal");
	Anchor::UpdateAnchorCounts();
	// if new checkpoint ?
	if (LastCPUsed < (Anchor::GetCount("Checkpoint") + Anchor::GetCount("Goal")))
	{
		// cont the max order of checkpoint
		declare Integer maxNumberOrderCp;
		maxNumberOrderCp = 0;
		foreach (Anchor in AnchorData) {
			if ((Anchor.Tag == "Checkpoint" || Anchor.Tag == "Goal") && (Anchor.Order > maxNumberOrderCp)) {
				maxNumberOrderCp = Anchor.Order;
			}
		}
		// apply max order to the next checkpoint
		maxNumberOrderCp += 1;
		foreach (Anchor in AnchorData) {
			if ((Anchor.Tag == "Checkpoint" || Anchor.Tag == "Goal") && (Anchor.Order == 0))
			{
				Anchor.Order = maxNumberOrderCp;
			}
		}
	}	
}

// ---------------------------------- //
// Return the manialink for anchor edition
// ---------------------------------- //
Void EditAnchorManialink(CAnchorData _Anchor) {
	declare Boolean Finish for ManialinkPage;
	declare Text AnchorOrder for ManialinkPage;
	
	AnchorOrder = TextLib::ToText(_Anchor.Order);
	
	ManialinkText = 		
	"""
	<script><!--		
		main() {
			
			declare Buttons = [(Page.GetFirstChild("checkpointOrder") as CMlEntry)];
					
			declare Boolean Finish for Page;
			declare Text AnchorOrder for Page;
			
			Finish = False;
			
			foreach(Button, Buttons){
				Button.Value = AnchorOrder;
			}
			
						
			Finish = False;	
			while(!Finish) {
				yield;
				
				foreach(Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::EntrySubmit : {
							AnchorOrder = Buttons[0].Value;
						}
						case CMlEvent::Type::MouseClick : {
							if (Event.ControlId == "back") {
								AnchorOrder = Buttons[0].Value;
								Finish = True;
							}
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="-75 -10">
		<quad posn="-80 39 0" sizen="80 84" style="Bgs1" substyle="BgHealthBar"/>
		<label posn="-40.5 32.5 0" sizen="76 8" text="Edit Anchor" halign="center" valign="center" style="TextTitle3" textsize="4" textcolor="229bffFF"/>	
		<entry posn="-41 -10 0" sizen="14 5" default="0" id="checkpointOrder" style="TextButtonNavBack" scriptevents="1" textsize="2" textformat="default" scale="2.5" valign="center2" halign="center"/>	
		<label posn="-40 11 0" sizen="77 26" text="Set the position (order) of the checkpoint below. (Press enter to valide changes)" valign="center" halign="center" autonewline="1"/>
		<label posn="-41 -30" halign="center" style="CardMain_Quit" text="Back" scriptevents="1" id="back"/>
	</frame>
	""";
  
	
	Finish = False;
	
	while(!Finish){
		yield;
	}
	
	_Anchor.Order = TextLib::ToInteger(AnchorOrder);
	
	UpdateValidability();
}

// ---------------------------------- //
// Manialink for non editable anchor
// ---------------------------------- //
Void NoEditManialink() {
	declare Boolean Finish for ManialinkPage;
	
	ManialinkText = """
		<script><!--			
			main() {
				declare Boolean Finish for Page;
				Finish = False;	
				while(!Finish) {
					yield;
					
					foreach(Event in PendingEvents) {
						switch(Event.Type){
							case CMlEvent::Type::MouseClick : {
								if (Event.ControlId == "back") {
									Finish = True;
								}
							}	
						}
					}
				}
			}			
		--></script>
		<frame posn="-75 -10">
			<quad posn="-80 39 0" sizen="80 84" style="Bgs1" substyle="BgHealthBar"/>
			<label posn="-40.5 32.5 0" sizen="76 8" text="Edit Anchor" halign="center" valign="center" style="TextTitle3" textsize="4" textcolor="229bffFF"/>
			<label posn="-40 11 0" sizen="77 26" text="This anchor is not editable" valign="center" halign="center" autonewline="1"/>
			<label posn="-41 -30" halign="center" style="CardMain_Quit" text="Back" scriptevents="1" id="back"/>
		</frame>
	""";
	
	Finish = False;
	
	while(!Finish){
		yield;
	}
	
	UpdateValidability();	
}

// ---------------------------------- //
// Show the anchor edition manialink
// ---------------------------------- //
Void EditAnchorData(Ident _EditedAnchorDataId) {

	declare Anchor <=> AnchorData[_EditedAnchorDataId];
	
	if (AnchorData[_EditedAnchorDataId].DefaultTag == "Checkpoint"){
		EditAnchorManialink(Anchor);
	} else {
		NoEditManialink();
	}
	

	UpdateValidability();
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {	
	CustomEditAnchorData = True;
	Rules = _("You must place exactly one Spawn, at least one Checkpoint. The last Checkpoint will automatically be defined as the Goal");
	UpdateValidability();
	while (True) {	
		yield;	
		foreach (Event in PendingEvents) {
			log("Type : " ^ Event.Type);
			if (Event.Type == CPluginEvent::Type::MapModified) {
				ValidationStatus = CSmMapType::ValidationStatus::Validated;
				AutoOrderCheckpoint();
				UpdateValidability();
			} else if (Event.Type == CPluginEvent::Type::EditAnchor) {
				EditAnchorData(Event.EditedAnchorDataId);
			} else if (Event.Type == CPluginEvent::Type::StartValidation) {
				StartTestMapWithMode("ObstacleRebornEditor.Script.txt");
			}
		}
	}	
}
#RequireContext CSmMapType

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
#Include "Libs/Kana/AnimationMLink.Script.txt" as AnimPos

declare Text Rules;
declare Integer LastCPUsed;

// ---------------------------------- //
// Verify anchors
// ---------------------------------- //
Void VerifyAnchors() {
	Anchor::UpdateAnchorCounts();
	
	declare Text errors;
	
	if (Anchor::GetCount("Goal") > 1){
		errors ^= "- You must place exactly one Goal.\n";
	}
	if (Anchor::GetCount("Spawn") > 1 || Anchor::GetCount("Spawn") == 0){
		errors ^= "- You must place exactly one Spawn.\n";
	}
		
	declare Integer checkpointCount;
	
	foreach(Anchor, AnchorData){
		if(Anchor.Tag == TextLib::SubText("Checkpoint", 0, 10)){
			checkpointCount += 1;
			if(Anchor.Order <= 0){
				errors ^= "- At least one checkpoint got a wrong order.\n";
				break;
			}
		} 
	}
	
	if(checkpointCount == 0){
		errors ^= "- You must place at least one Checkpoint.\n";
	}
	
	
	if(errors != ""){
		ManialinkText = """
			<frame posn="-75 35">
				<quad posn="-80 39 0" sizen="60 24" style="Bgs1" substyle="BgHealthBar"/>
				<label posn="-50 35 0" sizen="48 8" text="Requirements" halign="center" valign="center" style="TextTitle3" textsize="4" textcolor="229bffFF"/>
				<label posn="-50 24 0" sizen="57 21" text="The map is not validable because :{{{"\n" ^ errors}}}" valign="center" halign="center" autonewline="1" textsize="1"/>
			</frame>
			""";
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	} else {
		ManialinkText = "";
	}
}

// ---------------------------------- //
// Check if the map is valid
// ---------------------------------- //
Void UpdateValidability(){
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
	//Verify anchors
	VerifyAnchors();

	// Check checkpoint order
	declare CheckpointOrders = Integer[Integer];
	declare CheckpointCount = 0;
	foreach (Anchor in AnchorData) {
		if (Anchor.Tag == "Checkpoint") {
			CheckpointCount += 1;
			if (Anchor.Order <= 0) {
				ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
				//ValidabilityRequirementsMessage = _("At least one Checkpoint is wrong");
				return;
			}
			if (!CheckpointOrders.existskey(Anchor.Order)) {
				CheckpointOrders[Anchor.Order] = 1;
			} else {
				CheckpointOrders[Anchor.Order] += 1;
			}
		}
	}
}

// ---------------------------------- //
// If new checkpoint, add automaticly the next order to this cp.
// ---------------------------------- //
Void AutoOrderCheckpoint(){
	LastCPUsed = Anchor::GetCount("Checkpoint");
	LastCPUsed += Anchor::GetCount("Goal");
	Anchor::UpdateAnchorCounts();
	// if new checkpoint ?
	if (LastCPUsed < (Anchor::GetCount("Checkpoint") + Anchor::GetCount("Goal")))
	{
		// cont the max order of checkpoint
		declare Integer maxNumberOrderCp;
		maxNumberOrderCp = 0;
		foreach (Anchor in AnchorData) {
			if ((Anchor.Tag == "Checkpoint" || Anchor.Tag == "Goal") && (Anchor.Order > maxNumberOrderCp)) {
				maxNumberOrderCp = Anchor.Order;
			}
		}
		// apply max order to the next checkpoint
		maxNumberOrderCp += 1;
		foreach (Anchor in AnchorData) {
			if ((Anchor.Tag == "Checkpoint" || Anchor.Tag == "Goal") && (Anchor.Order == 0))
			{
				Anchor.Order = maxNumberOrderCp;
			}
		}
	}	
}

// ---------------------------------- //
// Return the manialink for anchor edition
// ---------------------------------- //
Void EditAnchorManialink(CAnchorData _Anchor) {
	declare Boolean Finish for ManialinkPage;
	declare Text AnchorOrder for ManialinkPage;
	
	AnchorOrder = TextLib::ToText(_Anchor.Order);

	AnimPos::setRestPos(-120.0, 3.0);
	AnimPos::animMlink_EditAnchorManialink();
	

  
	
	Finish = False;
	
	while(!Finish){
		yield;
	}
	
	_Anchor.Order = TextLib::ToInteger(AnchorOrder);
	
	UpdateValidability();
}

// ---------------------------------- //
// Manialink for non editable anchor
// ---------------------------------- //
Void NoEditManialink() {
	declare Boolean Finish for ManialinkPage;
	AnimPos::setRestPos(-120.0, 3.0);
	AnimPos::animMlink_NoEditManialink();
	
	Finish = False;
	
	while(!Finish){
		yield;
	}
	
	UpdateValidability();	
}

// ---------------------------------- //
// Show the anchor edition manialink
// ---------------------------------- //
Void EditAnchorData(Ident _EditedAnchorDataId) {

	declare Anchor <=> AnchorData[_EditedAnchorDataId];
	
	if (AnchorData[_EditedAnchorDataId].DefaultTag == "Checkpoint"){
		EditAnchorManialink(Anchor);
	} else {
		NoEditManialink();
	}
	

	UpdateValidability();
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	CustomEditAnchorData = True;
	Rules = _("You must place exactly one Spawn, at least one Checkpoint. The last Checkpoint will automatically be defined as the Goal");
	UpdateValidability();
	while (True) {	
		yield;	
		foreach (Event in PendingEvents) {
			if (Event.Type == CPluginEvent::Type::MapModified) {
				AutoOrderCheckpoint();
				UpdateValidability();
			} else if (Event.Type == CPluginEvent::Type::EditAnchor) {
				EditAnchorData(Event.EditedAnchorDataId);
			} else if (Event.Type == CPluginEvent::Type::StartValidation) {
				StartTestMapWithMode("ObstacleReborn.Script.txt");
			}
		}
	}	
}
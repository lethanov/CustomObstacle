/**
 *	Obstacle Custom GameMode
 *  Author : kana & lethan
 *  Original author : steeffeen
 */

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const CompatibleMapTypes "ObstacleArena, ObstacleTitleArena, CustomObstacleArena"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Message.Script.txt" as Message
//#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Lethan/ChronoObs.Script.txt" as Chrono
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen

// ---------------------------------- //
// Settings
// ---------------------------------- //

#Const Description _("Obstacle Custom GameMode\nOriginal Author : Steeffeen\nRework : kana & lethan")
#Const UITickPeriod 200

#Const Revision 4

// ---------------------------------- //
// Global var
// ---------------------------------- //
declare Text _GamePhase;

declare CUILayer DebugInfo;
declare CUILayer[Ident] Times;

declare CSmMapLandmark MainSpawn;
declare CSmMapLandmark[] ChecksRaw;
declare CSmMapLandmark[Integer] Checkpoints;

declare Integer[Ident] StartTimes;
declare Integer[Ident] PreviousTimes;
declare Integer[Ident] BestTimes;

declare Integer[Ident] CheckpointNext;
declare Integer[Ident] Respawns;

declare Integer CheckpointsCount;

// ---------------------------------- //
// Set rules
// ---------------------------------- //
***Rules***
***
declare ModeName = "Custom Obstacle";
declare ModeRules = TextLib::Compose(_("Obstacle Custom GameMode\nOriginal Author : Steeffeen\nRework : kana & lethan"), "$"^SpawnScreen::GetModeColor());
SpawnScreen::ResetRulesSection();
SpawnScreen::AddSubsection(_("Obstacle Custom GameMode"), ModeRules, 20.);
SpawnScreen::CreatePrettyRules(ModeName);
ModeStatusMessage = _("Obstacle Custom GameMode\nOriginal Author : Steeffeen\nRework : kana & lethan");
***

// ---------------------------------- //
// Server start
// ---------------------------------- //
***StartServer***
***
// ---------------------------------- //
// Set mode options
UseClans = False;
UseAllies = False;
UsePvPCollisions = False;
UsePvPWeapons = False;


DebugInfo = UIManager.UILayerCreate();
UIManager.UIAll.UILayers.add(DebugInfo);
DebugInfo.ManialinkPage = """
	<frame posn="-158 88 0">
				<label posn="0 0 1" halign="left" style="TextButtonNav" text="Custom Obstacle Revision : {{{Revision}}}" />
				
	</frame>
""";

// ---------------------------------- //
// Create the rules
---Rules---

// ---------------------------------- //
// Initialize UI
SpawnScreen::CreateScores("Score.RoundPoints");
SpawnScreen::CreateMapInfo();
//Interface::CreateRank();

// ---------------------------------- //
// Create the scores table
ST2::SetStyle("LibST_SMBaseSolo");
ST2::SetStyle("LibST_SMBasePoints");
MB_SetScoresTableStyleFromXml(S_ScoresTableStylePath);
ST2::Build("SM");
***


// ---------------------------------- //
// Map start
// ---------------------------------- //
***StartMap***
***
_GamePhase = "init";



Score::MatchBegin();
SM::SetupDefaultVisibility();
Chrono::Load();

InitObstacle();

// Init bases
foreach (Base in MapBases) {
	Base.Clan = 1;
	Base.IsActive = True;
}


UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;

***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***PlayLoop***
***
CheckForNewPlayers();

if(_GamePhase == "init"){
	sleep(500);
	declare Text authorMsg = "Author : " ^ Map.AuthorNickName ^ " (" ^ Map.AuthorLogin ^ ")";
	Message::SendStatusMessage(authorMsg, 5000, 3, CUIConfig::EUISound::Silence, 0);
	Message::SendBigMessage(MapName, 5000, 3, CUIConfig::EUISound::EndRound, 0);

	sleep(1000);
	
	StartTime = Now;
	EndTime = -1;
	
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
		
	_GamePhase = "play";
	
	
}
if(_GamePhase == "play"){
	//Players
	foreach(Player, Players){	
		if(StartTimes.existskey(Player.Id) && Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned){
			if(CheckpointNext[Player.Id] == 0){
				COSpawnPlayer(Player);
			}
		}
		if(Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
			if(StartTimes.existskey(Player.Id)){
				if(CheckpointNext[Player.Id] == 0){
					Chrono::Reset(Player.Id);
					Chrono::Start(Player.Id, 0);
					StartTimes[Player.Id] = Now;
					CheckpointNext[Player.Id] = 1;
					
					UpdateMarkerCheckpoint(Player, False);
				}
			}
		}
		
		if(Player.CapturedLandmark != Null){
			if(TextLib::SubText(Player.CapturedLandmark.Tag, 0, 4) == "Goal"){
				if(CheckpointNext[Player.Id] == CheckpointsCount){
					FinishStuff(Player);
				}
			}
			if(TextLib::SubText(Player.CapturedLandmark.Tag, 0, 10) == "Checkpoint"){
				if(Player.CapturedLandmark.Order == CheckpointNext[Player.Id] && CheckpointNext[Player.Id] == CheckpointsCount){
					FinishStuff(Player);
				} else {
					if(Player.CapturedLandmark.Order == CheckpointNext[Player.Id]){
						CheckpointStuff(Player);
					}
				}
			}			
		}
	}
	
	//Events
	foreach(Event, PendingEvents){
		switch(Event.Type){
			case CSmModeEvent::EType::OnPlayerRequestRespawn : {
				CORespawnPlayer(Event.Player);
			}
			case CSmModeEvent::EType::OnArmorEmpty : {
				Discard(Event);
				CORespawnPlayer(Event.Victim);
			}
		}
	}
	
}

Message::Loop();
***


// ---------------------------------- //
// Map end
// ---------------------------------- //
/****EndMap***
***
****/
// ---------------------------------- //
// Server end
// ---------------------------------- //
***EndServer***
***
UIManager.UILayerDestroyAll();
//Interface::DestroyRank();
SpawnScreen::DestroyRules();
SpawnScreen::DestroyScores();
SpawnScreen::DestroyMapInfo();
***

//Functions
Void UpdateMarkerCheckpoint(CSmPlayer _Player, Boolean _Finish){

	declare UI <=> UIManager.GetUI(_Player); //Get UI for player
	declare cpNext = CheckpointNext[_Player.Id]; //Get next checkpoint
	declare Integer[Integer] CheckpointsTimes for _Player;	//Get checkpoints time of the player

	declare cpNextTime = "";
	
	if(CheckpointsTimes.existskey(CheckpointNext[_Player.Id])){
		cpNextTime = " : (" ^ TextLib::TimeToText(CheckpointsTimes[cpNext], True) ^ ")"; 
	}
	
	
	if(!_Finish){
		if(cpNext != CheckpointsCount){
			UI.MarkersXML = """<marker label="CP {{{cpNext}}}{{{cpNextTime}}}" pos="{{{Checkpoints[cpNext].Position.X}}} {{{Checkpoints[cpNext].Position.Y + 2}}} {{{Checkpoints[cpNext].Position.Z}}}" />""";
		} else {
			UI.MarkersXML = """<marker label="Finish" pos="{{{Checkpoints[cpNext].Position.X}}} {{{Checkpoints[cpNext].Position.Y + 2}}} {{{Checkpoints[cpNext].Position.Z}}}" />""";
		}
	} else {
		UI.MarkersXML = "";
	}
}

Void UpdateTimes(CSmPlayer _Player){
	declare UI <=> UIManager.GetUI(_Player);

	UI.ManialinkPage = """
	<frame posn="130 -70 0" scale="0.8">
	<quad posn="-20 1 0" sizen="60 22" bgcolor="FFFA" style="Bgs1" substyle="BgButtonGrayed"/>
	<label posn="-17 -3 0" sizen="20 5" text="Best time" id="BestTime"/>
	<label posn="-17 -12 0" sizen="20 5" text="Previous" id="Previous"/>
	<label posn="22 -5 0" sizen="34 9" text="{{{TextLib::TimeToText(BestTimes[_Player.Id], True)}}}" style="TextRaceChronoWarning" textsize="5" halign="center" valign="center" id="best"/>
	<label posn="22 -14 0" sizen="34 9" text="{{{TextLib::TimeToText(PreviousTimes[_Player.Id], True)}}}" style="TextRaceChrono" textsize="5" halign="center" valign="center" id="prev"/>
</frame>
	""";
}

Void CheckForNewPlayers(){
	foreach(Player, Players){	
		if(!StartTimes.existskey(Player.Id)) {
			StartTimes[Player.Id] = 0;
			CheckpointNext[Player.Id] = 0;
			PreviousTimes[Player.Id] = 0;
			BestTimes[Player.Id] = 0;
			Respawns[Player.Id] = 0;
			
			declare Integer[Integer] CheckpointsTimes for Player;
			CheckpointsTimes = Integer[Integer];
			
			Chrono::Create(Player.Id);
			UpdateTimes(Player);
		}
	}
}

Void InitObstacle(){
	CheckpointsCount = 0;
	ChecksRaw.clear();
	StartTimes.clear();
	
	UIManager.UIAll.OverlayHideMapInfo = False;
	
	//Get Spawns
	foreach(Spawn, MapLandmarks_PlayerSpawn){
		if(TextLib::SubText(Spawn.Tag, 0, 5) == "Spawn"){
			MainSpawn <=> Spawn;
		}
	}
	
	//Get checkpoint count
	foreach(Checkpoint, MapLandmarks_Gauge){	
		if(TextLib::SubText(Checkpoint.Tag, 0, 10) == "Checkpoint"){
			ChecksRaw.add(Checkpoint);
			CheckpointsCount += 1;
		}
	}
	
	//Reorganise
	for(i, 1, CheckpointsCount){
		declare CSmMapLandmark nextCheck;
	
		foreach(CurCheck, ChecksRaw){
			//First one
			if(nextCheck == Null){
				if(TextLib::SubText(CurCheck.Tag, 0, 10) == "Checkpoint"){
					nextCheck <=> CurCheck;
				}
			} else {
				if(CurCheck.Order < nextCheck.Order && TextLib::SubText(CurCheck.Tag, 0, 10) == "Checkpoint"){
					nextCheck <=> CurCheck;
				}
			}
		}
		
		Checkpoints[i] <=> nextCheck;
		declare removed = ChecksRaw.remove(nextCheck);
	}
	
	//Add goal retro compatibility
	if(Map.MapType != "CustomObstacleArena"){
		foreach(FinishFind, MapLandmarks_Gauge){
			if(FinishFind.Tag == "Goal"){
				CheckpointsCount += 1;
				Checkpoints[CheckpointsCount] <=> FinishFind;
			}
		}
	}
}

Void COSpawnPlayer(CSmPlayer _Player){
	_Player.ArmorMax = 100;
	SpawnPlayer(_Player, 0, 100, MainSpawn.PlayerSpawn, Now);
}

Void CORespawnPlayer(CSmPlayer _Player){
	if(CheckpointNext[_Player.Id] == 1){
		UnspawnPlayer(_Player);
		Chrono::Stop(_Player.Id);
		CheckpointNext[_Player.Id] = 0;
	} else {
		RespawnPlayer(_Player, Checkpoints[CheckpointNext[_Player.Id] - 1]);
		Respawns[_Player.Id] += 1;
	}
}

Void CheckpointStuff(CSmPlayer _Player){
	
	declare Integer[Integer] CheckpointsTimes for _Player;	//Store best checks for this player
	declare time = Now - StartTimes[_Player.Id]; //Get the time when the player passes the checkpoint
	
	declare lastTimeForThisCheck = 0; 
	
	if(CheckpointsTimes.existskey(CheckpointNext[_Player.Id])){ //Is a time already exists ?
		lastTimeForThisCheck = CheckpointsTimes[CheckpointNext[_Player.Id]];
	}
	
	declare Integer soundCheckpoint;
	declare Text diffPersonalText;
	
	diffPersonalText = "";
	
	if(lastTimeForThisCheck != 0){ //If value already stored
		declare diffPersonal = time - lastTimeForThisCheck;
		
		if(diffPersonal < 0){ //If time is better than before
			CheckpointsTimes[CheckpointNext[_Player.Id]] = time; //Store the new best time for this checkpoint
			diffPersonalText = " ($00a" ^ TextLib::TimeToText(diffPersonal, True) ^ "$fff)";
			soundCheckpoint = 3;
		} else {
			diffPersonalText = " ($a00+" ^ TextLib::TimeToText(diffPersonal, True) ^ "$fff)";
			soundCheckpoint = 0;
		}
		
	} else {
		soundCheckpoint = 1;
		CheckpointsTimes[CheckpointNext[_Player.Id]] = time; //Store the new best time for this checkpoint
	}
	
	Message::SendStatusMessage(_Player, "Checkpoint : " ^ CheckpointNext[_Player.Id] ^ "/" ^ CheckpointsCount, 5000, 3, CUIConfig::EUISound::ScoreProgress, soundCheckpoint);
	Message::SendBigMessage(_Player, TextLib::TimeToText(time, True) ^ diffPersonalText, 5000, 3, CUIConfig::EUISound::Silence, 0);
	
	CheckpointNext[_Player.Id] += 1;
	
	UpdateMarkerCheckpoint(_Player, False);
}

Void FinishStuff(CSmPlayer _Player){
	declare time = Now - StartTimes[_Player.Id];
	declare diff = time - BestTimes[_Player.Id];	
	declare newRecord = False;
	declare Text diffText;
	
	PreviousTimes[_Player.Id] = time;
	
	if(BestTimes[_Player.Id] == 0){
		BestTimes[_Player.Id] = PreviousTimes[_Player.Id];
		diffText = "";
	} else {
		if(PreviousTimes[_Player.Id] < BestTimes[_Player.Id]){
			diff = time - BestTimes[_Player.Id];
			BestTimes[_Player.Id] = PreviousTimes[_Player.Id];
			newRecord = True;
			
			diffText = " ($0f0" ^ TextLib::TimeToText(diff, True) ^ "$fff)";
		} else {
			diffText = " ($f00+" ^ TextLib::TimeToText(diff, True) ^ "$fff)";
		}
	}
	
	
						
	Message::SendStatusMessage(_Player, "Race completed. " ^ TextLib::ToText(Respawns[_Player.Id]) ^ " respawns." , 4000, 3, CUIConfig::EUISound::Silence, 1);
	if(newRecord){
		Message::SendBigMessage(_Player, "New record : " ^ TextLib::TimeToText(time, True) ^ diffText, 4000, 3, CUIConfig::EUISound::VictoryPoint, 0);
	} else {
		Message::SendBigMessage(_Player, "Time : " ^ TextLib::TimeToText(time, True) ^ diffText, 4000, 3, CUIConfig::EUISound::EndMatch, 0);
	}
	
	UpdateMarkerCheckpoint(_Player, True);
	UnspawnPlayer(_Player);
	Chrono::Stop(_Player.Id);
	CheckpointNext[_Player.Id] = 0;
	Respawns[_Player.Id] = 0;
	
	UpdateTimes(_Player);
}
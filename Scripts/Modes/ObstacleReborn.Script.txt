#Extends "Modes/ShootMania/ModeBase.Script.txt"

//#Const CompatibleMapTypes  "MeleeArena"
//#Const Version             "1.0.0"
//#Const ScriptName          "MyScript.Script.txt"

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/Json.Script.txt" as Json
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/Lethan/ObstacleManialinks.Script.txt" as Manialinks
#Include "Libs/Lethan/ObstaclePlayerManager.Script.txt" as PlayerManager

// ---------------------------------- //
// Constants
// ---------------------------------- //
//List of your constant variables

// ---------------------------------- //
// Settings
// ---------------------------------- //

#Setting S_TimeLimit 45 as _("Time limit in minutes")

// ---------------------------------- //
// Globales
// ---------------------------------- //

declare Text G_GamePhase;

declare Integer G_TimeLimit;
declare Integer G_StartTime;
declare Boolean G_FreeTime;
declare Boolean G_ForcedNext;

//Landmarks
declare CSmMapLandmark G_MainSpawn;
declare CSmMapLandmark[Integer] G_Checkpoints;
declare Integer G_CheckpointsCount;

declare CUILayer G_ScoresTable;
declare CUILayer G_UIEventManager;

***StartMap***
***
declare ModeName = "Obstacle Reborn";
declare Rules = """
Authors : Kana & Lethan
Original Author : Steeffeen

- Finish the $<$88fobstacle course$> as fast as possible.
- To validate a race you must touch the finish after going through all the $<$88fcheckpoints$>.
- You can start over and improve your time as often as you want.
""";

SpawnScreen::ResetRulesSection();
SpawnScreen::AddSubsection(_("Obstacle Reborn - Informations"), Rules, 20.);
SpawnScreen::CreatePrettyRules(ModeName);
ModeStatusMessage = Rules;

SpawnScreen::CreateMapInfo();

UIManager.UIAll.UISequence = CUIConfig::EUISequence::PlayersPresentation;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
sleep(2000);
Users_DestroyAllFakes();
//Users_SetNbFakeUsers(20,0);
Bots();
InitObstacle();
***



***PlayLoop***
***
Message::Loop();
if(G_GamePhase == "verify"){
	if(!VerifyMap()){
		Message::SendStatusMessage("Please inform the map author : $z" ^ Map.AuthorNickName ^ " $z(" ^ Map.AuthorLogin ^ ")", 5000, 3, CUIConfig::EUISound::Silence, 0);
		Message::SendBigMessage("The map is corrupted / out of date", 5000, 3, CUIConfig::EUISound::EndRound, 0);
		sleep(8000);
		G_GamePhase = "skip";
		MatchEndRequested = True;
	} else {
		G_GamePhase = "init";
	}
}
if(G_GamePhase == "init"){
	declare Text authorMsg = "Author : $z" ^ Map.AuthorNickName ^ " $z(" ^ Map.AuthorLogin ^ ")";
	Message::SendStatusMessage(authorMsg, 5000, 3, CUIConfig::EUISound::Silence, 0);
	Message::SendBigMessage(MapName, 5000, 3, CUIConfig::EUISound::EndRound, 0);

	sleep(2000);

	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;

	G_TimeLimit = S_TimeLimit;

	StartTime = Now;

	if (S_TimeLimit > 0){
		EndTime = StartTime + (S_TimeLimit * 60000) + 2500;
		G_FreeTime = False;
	} else{
		G_FreeTime = True;
		EndTime = -1;
	}
	
	G_GamePhase = "play";
}
if(G_GamePhase == "play"){
	ObstacleMain();
}
***

***OnNewPlayer***
***
PlayerManager::Create(Player.Id);
PlayerManager::UpdateScoresTable();
***

***OnNewSpectator***
***
PlayerManager::Create(Spectator.Id);
PlayerManager::UpdateScoresTable();
***

***EndMap***
***
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
declare netwrite Boolean Net_NextMap for Teams[0];
Net_NextMap = True;
Message::SendBigMessage("", 2000, 3, CUIConfig::EUISound::EndRound, 0);
sleep(8000);
UIManager.UILayerDestroyAll();
***


// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// XML RPC Callback
// ---------------------------------- //
Void SendXmlRpcCallback(Text _CallbackName, CSmPlayer _Player, Integer _RunTime, Ident _CheckpointId) {
	if (_Player == Null || _Player.IsFakePlayer || _Player.Score == Null || _CallbackName == "" || _RunTime <= 0) return;
	declare Respawns for _Player = 0;
	declare JSON = "";
	
	// Player information
	JSON ^= Json::StringifyMinimal("Player", _Player, "")^",";
	
	// Run information
	JSON ^= """ "Run":{""";
	JSON ^= Json::Stringify("Time", _RunTime)^",";
	JSON ^= Json::Stringify("RespawnCount", Respawns)^",";
	
	declare CheckpointsTimeLast for _Player.Score = Integer[Ident];
	JSON ^= Json::Stringify("CheckpointIndex", CheckpointsTimeLast.count-1)^",";
	JSON ^= """ "CheckpointId":"{{{_CheckpointId}}}"}""";
	
	XmlRpc.SendCallback(_CallbackName, Json::Enfold(JSON));
}

// ---------------------------------- //
// Send notice
// ---------------------------------- //
Void SendNotice(CSmPlayer _Player, Text _Message){
	declare UI <=> UIManager.GetUI(_Player);
	UI.SendNotice(_Message, CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
}

// ---------------------------------- //
// Spawn Start Player
// ---------------------------------- //
Void SpawnStartPlayer(Ident _PlayerId){
	if(Players.existskey(_PlayerId)){
		declare _Player = Players[_PlayerId];

		_Player.ArmorMax = 100;

		SpawnPlayer(_Player, 0, 100, G_MainSpawn.PlayerSpawn, Now);
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
		SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 4);

		PlayerManager::RestartPlayer(_Player.Id);
	}
}

// ---------------------------------- //
// Jump Player to Spawn //DEPRECATED
// ---------------------------------- //
Void JumpPlayer(Ident _PlayerId){
	if(Players.existskey(_PlayerId)){
		declare _Player = Players[_PlayerId];
		foreach(Spawn, MapLandmarks_PlayerSpawn){
			//if(Spawn.Tag == "CPSpawn" && Spawn.Order == PlayerManager::GetCheckpointProgress(_PlayerId)){
				SpawnPlayer(_Player, 0, 100, Spawn.PlayerSpawn, Now);
			//}
		}
	}
}

// ---------------------------------- //
// Manage Respawn Player
// ---------------------------------- //
Void ManageRespawnPlayer(Ident _PlayerId, Boolean _CustomKey){
	if(Players.existskey(_PlayerId)){
		declare _Player = Players[_PlayerId];
		declare UI <=> UIManager.GetUI(_Player);
		declare netread Boolean RespawnAtStart for UI;

		//Full restart
		if(_CustomKey){
			SpawnStartPlayer(_Player.Id);
		} else {
			if(!RespawnAtStart){
				if(PlayerManager::GetCheckpointObjective(_Player.Id) > 1){	
					PlayerManager::RespawnPlayerAtLastCP(_Player.Id);
					_Player.JumpPower = 0.1;
					_Player.SpeedPower = 0.1;
				} else {
					SpawnStartPlayer(_Player.Id);
				}
			} else {
				SpawnStartPlayer(_Player.Id);
			}
		}
	}
}

// ---------------------------------- //
// Update Color
// ---------------------------------- //
Void UpdateColor(){
	Teams[0].ColorPrimary = <MathLib::Rand(0.0, 1.0), MathLib::Rand(0.0, 1.0), MathLib::Rand(0.0, 1.0)>;
}

// ---------------------------------- //
// Checkpoint Event
// ---------------------------------- //
Void CheckpointEvent(Ident _PlayerId){
	if(Players.existskey(_PlayerId)){
		PlayerManager::DoCheckpointProgress(_PlayerId);

		declare _Player = Players[_PlayerId];

		declare Text message;
		declare sound = 1;

		declare Text diffPersonnal;
		declare Text diffBest;

		if(PlayerManager::IsNotHisFirstRun(_PlayerId)){
			if(PlayerManager::GetLastCPDiff(_PlayerId) < 0){
				diffPersonnal = " $99f" ^ TextLib::TimeToText(PlayerManager::GetLastCPDiff(_PlayerId), True);
				sound = 3;
			} else {
				diffPersonnal = " $f99+" ^ TextLib::TimeToText(PlayerManager::GetLastCPDiff(_PlayerId), True);
				sound = 0;
			}
		}

		if(PlayerManager::IsMapFinishedBySomeone()){
			if(PlayerManager::GetLastCPDiffBest(_PlayerId) < 0){
				diffBest = " $ff0" ^ TextLib::TimeToText(PlayerManager::GetLastCPDiffBest(_PlayerId), True);
				Message::SendBigMessage(_Player, "", 10, 3, CUIConfig::EUISound::Record, 0);
			} else {
				diffBest = " $999+" ^ TextLib::TimeToText(PlayerManager::GetLastCPDiffBest(_PlayerId), True);
			}
		}
		message = "Time : " ^ TextLib::TimeToText(PlayerManager::GetTime(_Player.Id), True) ^ diffPersonnal ^ diffBest;
		

		Message::SendStatusMessage(_Player, message, 5000, 3, CUIConfig::EUISound::ScoreProgress, sound);

		//Old maps
		if(PlayerManager::IsCheckpointOldType3(_PlayerId)){
			JumpPlayer(_PlayerId);
		}
		PlayerManager::UpdateScoresTable();

		foreach(PlayerSpectator, PlayerManager::GetSpectators(_PlayerId)){
			Message::SendStatusMessage(PlayerSpectator, message, 5000, 3, CUIConfig::EUISound::ScoreProgress, sound);			
		}
	}
}

// ---------------------------------- //
// Finish Event
// ---------------------------------- //
Void FinishEvent(Ident _PlayerId){
	if(Players.existskey(_PlayerId)){
		PlayerManager::DoCheckpointProgress(_PlayerId);
		PlayerManager::CalculateTime(_PlayerId);
		
		declare _Player = Players[_PlayerId];

		declare Text message;

		declare Text diffPersonnal;
		declare Text diffBest;

		if(PlayerManager::IsNotHisFirstRun(_PlayerId)){
			if(PlayerManager::GetBestTimeDiff(_Player.Id) < 0){
				diffPersonnal = " $00f" ^ TextLib::TimeToText(PlayerManager::GetBestTimeDiff(_Player.Id), True);
				Message::SendBigMessage(_Player, "", 10, 3, CUIConfig::EUISound::Finish, 0);
			} else {
				diffPersonnal = " $f00+" ^ TextLib::TimeToText(PlayerManager::GetBestTimeDiff(_Player.Id), True);
			}
		}

		if(PlayerManager::IsMapFinishedBySomeone()){
			if(PlayerManager::GetBestTimeDiffAll(_PlayerId) < 0){
				diffBest = " $ff0" ^ TextLib::TimeToText(PlayerManager::GetBestTimeDiffAll(_PlayerId), True);
				Message::SendBigMessage(_Player, "", 10, 3, CUIConfig::EUISound::Record, 0);
			} else {
				diffBest = " $999+" ^ TextLib::TimeToText(PlayerManager::GetBestTimeDiffAll(_PlayerId), True);
			}
		}

		message = "Final Time : " ^ TextLib::TimeToText(PlayerManager::GetLastTime(_Player.Id), True) ^ diffPersonnal ^ diffBest;
		
		
		Message::SendStatusMessage(_Player, message, 5000, 3, CUIConfig::EUISound::EndRound, 0);

		SendXmlRpcCallback("OnFinish", _Player, PlayerManager::GetLastTime(_Player.Id), G_Checkpoints[G_Checkpoints.count - 1].Id);

		PlayerManager::RaceFinish(_PlayerId);
		
		UnspawnPlayer(_Player);

		Teams[0].ColorPrimary = <MathLib::Rand(0.0, 1.0), MathLib::Rand(0.0, 1.0), MathLib::Rand(0.0, 1.0)>;
		PlayerManager::UpdateScoresTable();
		foreach(PlayerSpectator, PlayerManager::GetSpectators(_PlayerId)){
			Message::SendStatusMessage(PlayerSpectator, message, 5000, 3, CUIConfig::EUISound::EndRound, 0);			
		}
	}
}

// ---------------------------------- //
// Obstacle Main
// ---------------------------------- //
Void ObstacleMain(){

	declare netwrite Integer ForceNextCount for Teams[0];

	ForceNextCount = 0;
	//Players
	foreach(Player, AllPlayers){

		if(Player.JumpPower < 0.5){
			Player.JumpPower += 0.1;
			Player.SpeedPower += 0.1;
		} else {
			Player.JumpPower = 1.0;
			Player.SpeedPower = 1.0;
		}
		
		PlayerManager::Update(Player.Id);
		if(!Player.RequestsSpectate){
			if(Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned){
				SpawnStartPlayer(Player.Id);
			}
			if(Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !PlayerManager::IsRaceStarted(Player.Id)){
				PlayerManager::RaceStart(Player.Id);
				PlayerManager::UpdateScoresTable();
			}

			if(Player.CapturedLandmark != Null){
				if(TextLib::SubText(Player.CapturedLandmark.Tag, 0, 4) == "Goal"){
					if(PlayerManager::GetCheckpointObjective(Player.Id) == G_CheckpointsCount){
						FinishEvent(Player.Id);
					}
				}
				if(TextLib::SubText(Player.CapturedLandmark.Tag, 0, 10) == "Checkpoint"){
					if(Player.CapturedLandmark.Order == G_Checkpoints[PlayerManager::GetCheckpointObjective(Player.Id)].Order){
						if(PlayerManager::GetCheckpointObjective(Player.Id) == G_CheckpointsCount){
							FinishEvent(Player.Id);
						} else {
							CheckpointEvent(Player.Id);
						}
					}
				}
			}


			//Handle stamina if unlimited;
			declare Boolean StaminaUnlimited for Player;

			//Respawn CP or Respawn
			declare UI <=> UIManager.GetUI(Player);
			declare LastCustomKeyTime for Player = 0;
			declare netread CustomKeyTime for UI = 0;
			declare netread Boolean CustomKeyEdit for UI;
			
			if (CustomKeyTime > LastCustomKeyTime) {
				if(!CustomKeyEdit){
					ManageRespawnPlayer(Player.Id, True);
				}
				LastCustomKeyTime = CustomKeyTime;
			}

			if(StaminaUnlimited){
				Player.Stamina = 3600;
			}

			//Force next
			declare netread Boolean ForceNext for UI;
			if(ForceNext){
				ForceNextCount += 1;
			}
		}
	}

	//Managing events
	foreach(Event, PendingEvents){
		switch(Event.Type){
			case CSmModeEvent::EType::OnShoot : {
				PassOn(Event);
				PlayerManager::OnShoot(Event.Shooter.Id);
			}
			case CSmModeEvent::EType::OnPlayerRequestRespawn : {
				Discard(Event);
				declare UI <=> UIManager.GetUI(Event.Player);
				declare netread Boolean CustomKeyEdit for UI;
				if(!CustomKeyEdit){
					ManageRespawnPlayer(Event.Player.Id, False);
				}
			}
			case CSmModeEvent::EType::OnArmorEmpty : {
				Discard(Event);
				ManageRespawnPlayer(Event.Victim.Id, False);
			}
		}
	}

	//Timer
	declare netwrite Integer Net_TimeRemaining for Teams[0];
	declare netwrite Boolean Net_FreeTime for Teams[0];
	declare netwrite Integer Net_PlayersCount for Teams[0];

	Net_PlayersCount = Players.count;
	Net_TimeRemaining = EndTime - Now;

	if(!G_ForcedNext){
		if(S_TimeLimit != G_TimeLimit){
			if(S_TimeLimit <= 0){
				G_TimeLimit = -1;
				Net_TimeRemaining = -1;
				G_FreeTime = True;
			} else {
				if(S_TimeLimit != G_TimeLimit){
					G_TimeLimit = S_TimeLimit;
					StartTime = Now - 1000;
					EndTime = StartTime + (G_TimeLimit * 60000) + 1000;
					G_FreeTime = False;
				}
			}
		}
	}
	if(Players.count > 0 && ForceNextCount == Players.count && !G_ForcedNext){
		StartTime = Now - 1000;
		EndTime = StartTime + 21000;
		G_ForcedNext = True;
		G_FreeTime = False;
		foreach(Player, Players){
			declare UI <=> UIManager.GetUI(Player);
			UI.SendNotice("Voting has forced an End of the current Map", CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::FirstHit, 0);
		}
	}

	Net_TimeRemaining = EndTime - Now;
	Net_FreeTime = G_FreeTime;

	if(Net_TimeRemaining < 0 && !G_FreeTime){
		MatchEndRequested = True;
	}
}

// ---------------------------------- //
// Bots
// ---------------------------------- //
Void Bots(){
	foreach(Bot, BotPlayers){
		Bot.Driver.Behaviour = CSmPlayerDriver::ESmDriverBehaviour::Saunter;
		Bot.Driver.ForcedTarget = Players[0];
	}
}

// ---------------------------------- //
// Init obstacle
// ---------------------------------- //
Void InitObstacle(){
	// Set mode options
	UseClans = False;
	UsePvPCollisions = False;
	UsePvPWeapons = False;
	UseSameWallJump = True;
	ForceNavMapsComputation = True;
	
	G_GamePhase = "verify";

	//Colors
	foreach(Base, MapBases){
		Base.Clan = 1;
		Base.IsActive = True;
	}

	UpdateColor();	
	
	SM::SetupDefaultVisibility();

	//Purge other manialinks
	UIManager.UIAll.ScoreTableOnlyManialink = True;
	UIManager.UIAll.AltMenuNoCustomScores = False;
	UIManager.UIAll.OverlayHideMapInfo = True;
	UIManager.UIAll.OverlayHideCountdown = True;

	//Create Score Table
	G_ScoresTable = UIManager.UILayerCreate();
	G_ScoresTable.Type = CUILayer::EUILayerType::ScoresTable;
	G_ScoresTable.ManialinkPage = Manialinks::CreateScoresTable();
	UIManager.UIAll.UILayers.add(G_ScoresTable);

	//Create UIEventManager
	G_UIEventManager = UIManager.UILayerCreate();
	G_UIEventManager.ManialinkPage = Manialinks::CreateUIEventManager();
	UIManager.UIAll.UILayers.add(G_UIEventManager);

	//Get Spawns
	foreach(Spawn, MapLandmarks_PlayerSpawn){
		if(TextLib::SubText(Spawn.Tag, 0, 5) == "Spawn"){
			G_MainSpawn <=> Spawn;
		}
	}
	

	//Manage Checkpoints and goal
	declare CSmMapLandmark[] ChecksRaw;
	
	ChecksRaw.clear();
	G_Checkpoints = CSmMapLandmark[Integer];
	G_CheckpointsCount = 0;

	//Get checkpoint count
	foreach(Checkpoint, MapLandmarks_Gauge){	
		if(TextLib::SubText(Checkpoint.Tag, 0, 10) == "Checkpoint"){
			ChecksRaw.add(Checkpoint);
			G_CheckpointsCount += 1;
		}
	}
	
	//Reorganise
	for(i, 1, G_CheckpointsCount){
		declare CSmMapLandmark nextCheck;
	
		foreach(CurCheck, ChecksRaw){
			//First one
			if(nextCheck == Null){
				if(TextLib::SubText(CurCheck.Tag, 0, 10) == "Checkpoint"){
					nextCheck <=> CurCheck;
				}
			} else {
				if(CurCheck.Order < nextCheck.Order && TextLib::SubText(CurCheck.Tag, 0, 10) == "Checkpoint"){
					nextCheck <=> CurCheck;
				}
			}
		}
		
		G_Checkpoints[i] <=> nextCheck;
		declare removed = ChecksRaw.remove(nextCheck);
	}
	
	/*
	//Add goal retro compatibility
	if(TextLib::SubText(Map.MapType, 11, 19) != "ObstacleRebornArena"){*/
	foreach(FinishFind, MapLandmarks_Gauge){
		if(FinishFind.Tag == "Goal"){
			G_CheckpointsCount += 1;
			G_Checkpoints[G_CheckpointsCount] <=> FinishFind;
		}
	}
	//}

	declare netwrite Integer Net_CheckpointsCount for Teams[0];

	declare netwrite Boolean Net_NextMap for Teams[0];

	Net_CheckpointsCount = G_CheckpointsCount;
	Net_NextMap = False;

	PlayerManager::Start(G_Checkpoints);
	
}

// ---------------------------------- //
// Verify Map
// ---------------------------------- //
Boolean VerifyMap(){
	declare Boolean clean;
	clean = True;

	if(TextLib::SubText(Map.MapType, 11, 19) == "ObstacleRebornArena"){
		if(MapLandmarks_PlayerSpawn.count != 1){
			clean = False;
		}
	}

	declare goalExists = False;
	
	if(TextLib::SubText(Map.MapType, 11, 19) != "ObstacleRebornArena"){
		foreach(FinishFind, MapLandmarks_Gauge){
			if(FinishFind.Tag == "Goal"){
				goalExists = True;
			}
		}
		if(!goalExists){
			clean = False;
		}
	} else {
		goalExists = True;
	}

	declare Boolean[Integer] orders;

	foreach(Test, MapLandmarks_Gauge){
		if(orders.existskey(Test.Order)){
			clean = False;
		} else {
			orders[Test.Order] = True;
		}
	}

	return clean;
}